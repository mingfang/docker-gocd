<% scope = {:isNewRepo => true, :package_repository => @package_repository, :package_repositories => @package_repositories, :url => package_repositories_create_path, :method => "POST",:package_to_pipeline_map => @package_to_pipeline_map}; -%><style type="text/css">.errors{overflow:auto}</style>
<%- @view_title = "Administration" -%>
<div class="andare">
    <div id="package-repositories" class="layout admin-entity">
        <div class="navigation">
                <% _scope = {:package_repositories => scope[:package_repositories], :current_repo => scope[:package_repository].getName(), :package_to_pipeline_map => scope[:package_to_pipeline_map]}; -%><%- new_repo_class = (_scope[:current_repo] == nil) ? "selected" : "" %>
<%= link_to content_tag(:span, l.string("ADD_NEW_REPOSITORY")), package_repositories_new_path(), :class => ['add ', new_repo_class] %>
<%- if _scope[:package_repositories].empty? %>
    <p id="no-items">No repository found.</p>
<%- else %>

    <input type="text" class="search" placeholder='Search for Repository or Package'/>

    <p style="display: none" class="no-items">No repository found.</p>

    <ul class="repositories treenav accordion">
        <%- isCurrent = false
            _scope[:package_repositories].each do |repo|
              if _scope[:current_repo] == repo.getName()
                isCurrent = true
              end
        %>
            <li class="<%= isCurrent ? (_scope[:package_id] ? 'grey_selected' : 'selected') : '' %>" title="<%= repo.getName() -%>">
                <span class="handle"></span>

                <div class="entity">
                    <%= link_to repo.getName(), package_repositories_edit_path(:id => repo.getId()) -%>
                    <% form_for :repo, repo, :url => package_repositories_delete_path(:id => repo.getId()), :html => {:id => "delete_repository_"+repo.getId, :method => :delete} do |f| %>
                        <% if @cruise_config.canDeletePackageRepository(repo) %>
                            <%= md5_field %>
                            <button title='<%= l.string("DELETE_REPOSITORY") %>' type="button" class="remove" id="button_for_repository_delete_from_tree_<%= repo.getId() %>"></button>
                            <% __scope = {:button_container => "delete_repository_#{repo.getId()}", :button_id => "button_for_repository_delete_from_tree_#{repo.getId()}", :message => "You are about to delete repository <span style='font-weight:bold'>#{repo.getName()}</span>", :on_confirmation_js => "$('#{"delete_repository_#{repo.getId()}"}').submit()"}; -%><script type="text/javascript">
    <%- button_container = __scope[:button_container] -%>
    <%- button_id = __scope[:button_id] -%>
    <%- button_selector =  button_container==nil ? button_id : button_container+' #'+button_id -%>
    <%- prompt_selector =  button_container==nil ? button_id +' #warning_prompt' : button_container +' #warning_prompt' -%>
    <%- message = __scope[:message] -%>
    <%- on_confirmation_js = __scope[:on_confirmation_js] -%>
    jQuery(Util.escapeDotsFromId('<%=button_selector-%>')).click(function() {
        Modalbox.show(jQuery(Util.escapeDotsFromId('<%=prompt_selector-%>'))[0], {overlayClose: false, title: '<%= l.string("CONFIRM_DELETION") %>'});
    });
</script>
<div id="warning_prompt" class="warning" style="display:none;">
    <div class="ui-dialog-content">
        <p><%=message-%></p>
    </div>
    <div class="form_buttons actions">
        <%= submit_button(l.string("PROCEED"), :class=> "primary", :onclick => on_confirmation_js ) %>
        <%= submit_button(l.string("CANCEL"), :onclick => "Modalbox.hide()", :type => "button") %>
    </div>
</div>
                        <% else %>
                            <button type="button" title="<%= l.string('CANNOT_DELETE_REPOSITORY') %>" class="remove" id="delete_repository_button_<%= repo.getId() %>" disabled="disabled"></button>
                        <% end %>
                    <% end %>
                </div>

                <ul class="packages">
                    <%- if repo.getPackages().empty? %>
                        <li class="empty-node"><span>No packages found</span></li>
                    <%- else %>
                        <% repo.getPackages().each do |pkg| %>
                            <li title="<%= pkg.getName() -%>" class="<%= pkg.getId() == _scope[:package_id] ? 'selected' :'' %>">
                                <div class="entity">
                                    <%= link_to pkg.getName(), package_definitions_show_with_repository_list_path(:repo_id => repo.getId(), :package_id => pkg.getId()) -%>
                                    <% form_for :pkg, pkg, :url => package_definition_delete_path(:repo_id => repo.getId(), :package_id => pkg.getId()), :html => {:id => "delete_package_"+pkg.getId, :method => :delete} do |f| %>

                                        <% if _scope[:package_to_pipeline_map].get(pkg.getId()) == nil %>
                                            <%= md5_field %>
                                            <span id="package_delete_from_tree_<%= pkg.getId() %>">
                                        <button title='<%= l.string("DELETE_PACKAGE_TITLE") -%>' type="button" class="remove" id="delete_button_from_tree_<%= pkg.getId() %>"></button>
                                                <% __scope = {:button_container => "package_delete_from_tree_#{pkg.getId()}", :button_id => "delete_button_from_tree_#{pkg.getId()}", :message => "You are about to delete package <span style='font-weight:bold'>#{pkg.getName()}</span>", :on_confirmation_js => "$('#{"delete_package_#{pkg.getId()}"}').submit()"}; -%><script type="text/javascript">
    <%- button_container = __scope[:button_container] -%>
    <%- button_id = __scope[:button_id] -%>
    <%- button_selector =  button_container==nil ? button_id : button_container+' #'+button_id -%>
    <%- prompt_selector =  button_container==nil ? button_id +' #warning_prompt' : button_container +' #warning_prompt' -%>
    <%- message = __scope[:message] -%>
    <%- on_confirmation_js = __scope[:on_confirmation_js] -%>
    jQuery(Util.escapeDotsFromId('<%=button_selector-%>')).click(function() {
        Modalbox.show(jQuery(Util.escapeDotsFromId('<%=prompt_selector-%>'))[0], {overlayClose: false, title: '<%= l.string("CONFIRM_DELETION") %>'});
    });
</script>
<div id="warning_prompt" class="warning" style="display:none;">
    <div class="ui-dialog-content">
        <p><%=message-%></p>
    </div>
    <div class="form_buttons actions">
        <%= submit_button(l.string("PROCEED"), :class=> "primary", :onclick => on_confirmation_js ) %>
        <%= submit_button(l.string("CANCEL"), :onclick => "Modalbox.hide()", :type => "button") %>
    </div>
</div>
                                    </span>
                                        <% else %>
                                            <button title='<%= l.string("PACKAGE_USED_IN_PIPELINES") -%>' type="button" class="remove" id="delete_button_<%= pkg.getId() %>" disabled="disabled"></button>
                                        <% end %>
                                    <% end %>
                                </div>
                            </li>
                        <% end %>
                    <% end %>
                </ul>
            </li>
            <%- isCurrent = false %>
        <% end %>
    </ul>
<%- end -%>

<script type="text/javascript">
    Util.on_load(function(){
        new CustomTreeView().init();
        new CustomTreeView().bindTreeSearch(jQuery('.search'));
    })
</script>
        </div>
        <div class="content">
            <h2>
            <%- if scope[:isNewRepo] %>Add <% else %>Edit <% end %>Package Repository<a class="help" href="/go/help/package_material.html" target="_blank">What is a Package Repository?</a>
            </h2>
            <% if package_material_plugins.length < 2 %>
                <div class="information" style="margin: 0 !important;"> <%= l.string("NO_PLUGINS_INSTALLED")-%></div>
            <%- end -%>
            <% _scope = {}; -%><% if @errors && !@errors.empty? %>
    <div class="form_submit_errors">
        <div class="errors">
            <h3><%= l.string("GLOBAL_ERRORS_MESSAGE") -%></h3>
            <ul>
                <% @errors.each do |error| %>
                    <li class="error"><%= h(error.to_s) -%></li>
                <% end %>
            </ul>
        </div>
    </div>
<% end %>
            <div id="ajax_form_submit_errors" class="form_submit_errors">
            </div>
            <% form_for "package_repository", scope[:package_repository], :url => scope[:url], :html => {:method => scope[:method], :id => "package_repositories_edit_form"} do |f| %>
                <fieldset>
                    <div class="hidden">
                        <%= md5_field %>
                        <%= f.hidden_field com.thoughtworks.cruise.domain.packagerepository.PackageRepository::REPO_ID %>
                    </div>

                    <div class="field required">
                        <%= label_with_hint f, com.thoughtworks.cruise.domain.packagerepository.PackageRepository::NAME, l.string("NAME"), "Enter a globally unique name", "required" %>
                        <%= f.text_field com.thoughtworks.cruise.domain.packagerepository.PackageRepository::NAME, :class => 'important' -%>
                    </div>
                    <%- f.fields_for com.thoughtworks.cruise.domain.packagerepository.PackageRepository::PLUGIN_CONFIGURATION, scope[:package_repository].getPluginConfiguration() do |plugin_configuration_form| -%>
                        <div class="field required">
                            <%= label_with_hint plugin_configuration_form, com.thoughtworks.cruise.domain.PluginConfiguration::ID, l.string("TYPE"), "Choose from available plugins", "required" -%>
                            <%= plugin_configuration_form.select com.thoughtworks.cruise.domain.PluginConfiguration::ID, package_material_plugins, {:selected => scope[:package_repository].getPluginConfiguration().getId()}, {} -%>
                        </div>
                    <%- end -%>
                </fieldset>
                <div id="pluginConfigurations">
                     <% _scope = {:repository_configuration => @repository_configuration, :plugin_id => scope[:package_repository].getPluginConfiguration().getId(), :isNewRepo => scope[:iSNewRepo]}; -%><%- if _scope[:repository_configuration] -%>
<fieldset>
    <legend><span><%= _scope[:plugin_id].upcase %> Repository Configuration</span></legend>
    <%- _scope[:repository_configuration].properties.each_with_index do |package_property_model, index| %>
        <%- fields_for "package_repository[#{com.thoughtworks.cruise.domain.packagerepository.Configuration::CONFIGURATION}]", package_property_model, :index => "#{index}" do |var_form| -%>
                <div class="field required">
                    <%- var_form.fields_for com.thoughtworks.cruise.domain.packagerepository.ConfigurationProperty::CONFIGURATION_KEY, package_property_model do |configuration_key| -%>
                        <%= configuration_key.hidden_field com.thoughtworks.cruise.domain.packagerepository.ConfigurationKey::NAME %>
                        <%- if package_property_model.is_mandatory -%>
                            <%= required_label(configuration_key, "value", package_property_model.display_name) -%>
                        <%- else -%>
                            <%= label(configuration_key, "value", package_property_model.display_name) -%>
                        <%- end -%>
                    <%- end -%>
                    <% if package_property_model.is_secure %>
                        <%- var_form.fields_for com.thoughtworks.cruise.domain.packagerepository.ConfigurationProperty::CONFIGURATION_VALUE, package_property_model do |configuration_value| -%>
                            <%- if _scope[:isNewRepo] %>
                                <%= configuration_value.password_field com.thoughtworks.cruise.domain.packagerepository.ConfigurationValue::VALUE, :id => "secure_field_#{index}" %>
                            <%- else -%>
                                <%= configuration_value.password_field com.thoughtworks.cruise.domain.packagerepository.ConfigurationValue::VALUE, :readonly => "readonly", :id => "secure_field_#{index}" %>
                            <%- end -%>
                        <%- end -%>
                        <%- var_form.fields_for com.thoughtworks.cruise.domain.packagerepository.ConfigurationProperty::ENCRYPTED_VALUE, package_property_model do |configuration_value| -%>
                            <%= configuration_value.hidden_field com.thoughtworks.cruise.domain.packagerepository.EncryptedConfigurationValue::VALUE, :id => "hidden_field_#{index}" -%>
                            <%- if !_scope[:isNewRepo] %>
                                <div>
                                    <% chkbox = check_box_tag("package_repository[#{com.thoughtworks.cruise.domain.packagerepository.Configuration::CONFIGURATION}][#{index}][#{com.thoughtworks.cruise.domain.packagerepository.ConfigurationProperty::IS_CHANGED}]", "1", false, {:class => "password_changed", :id => "checkbox_field_#{index}"}) -%>

                                    <%= label_tag "checkbox_field_#{index}", chkbox + "<span>Change #{package_property_model.display_name}</span>", :class=> 'checkbox' -%>
                                    <script type="text/javascript">
                                        var passwordField = "<%="#secure_field_#{index}"-%>";
                                        var checkBox = "<%="#checkbox_field_#{index}"-%>";
                                        var hiddenField = "<%="#hidden_field_#{index}"-%>";
                                        jQuery(checkBox).click(function () {
                                            if (jQuery(this).is(":checked")) {
                                                jQuery(passwordField).removeAttr('readonly');
                                                jQuery(passwordField).val('');
                                            }
                                            else {
                                                jQuery(passwordField).attr('readonly', 'readonly');
                                                jQuery(passwordField).val(jQuery(hiddenField).val());
                                            }

                                        });
                                    </script>
                                </div>
                            <%- else -%>
                                <%= hidden_field_tag("package_repository[#{com.thoughtworks.cruise.domain.packagerepository.Configuration::CONFIGURATION}][#{index}][#{com.thoughtworks.cruise.domain.packagerepository.ConfigurationProperty::IS_CHANGED}]","1") %>
                            <%- end -%>
                        <%- end -%>
                    <% else %>
                        <%- var_form.fields_for com.thoughtworks.cruise.domain.packagerepository.ConfigurationProperty::CONFIGURATION_VALUE, package_property_model do |configuration_value| -%>
                            <%= configuration_value.text_field com.thoughtworks.cruise.domain.packagerepository.ConfigurationValue::VALUE %>
                        <%- end -%>
                    <%- end -%>
                    </div>
            <% end %>
    <% end %>
    <div class="field no-label-element">
        <%= submit_button(l.string("CHECK_CONNECTION"), :type => "button", :id => "check_connection") -%>
        <span id="repository_connection_message"></span>
    </div>
</fieldset>
<%- end -%>





                </div>
                <% _scope = {}; -%><p class="required">
	<span class="asterisk"><%= l.string("REQUIRED_FIELD")%></span><%= l.string("REQUIRED_FIELD_MESSAGE")-%>
</p>
                <div class="form_buttons">
                        <button type="submit" class="submit primary" id="submit_form"><span><%= l.string("SAVE") -%></span></button>
                        <button type="reset" class="submit" id="reset_form"><span><%= l.string("RESET") -%></span></button>
                </div>
            <% end %>
        </div>
        <% _scope = {}; -%><script type="text/javascript">
    Util.on_load(function() {
        jQuery(".has_go_tip").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10});
        jQuery(".has_go_tip_right").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "right"});
        jQuery(".has_go_tip_left").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "left" });
        jQuery(".has_go_tip_top").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "top" });
    });
</script>
    </div>
</div>

<script type="text/javascript">
    Util.on_load(function () {
        new PackageMaterialCheckConnection("<%= package_repositories_check_connection_path%>").bind("#pluginConfigurations","#check_connection","#repository_connection_message");

        var url = '<%= package_repositories_plugin_config_path(:plugin => "$pluginid$") -%>';
        var errorMessageHeading = '<%= l.string("GLOBAL_ERRORS_MESSAGE") -%>'
        new PackageRepositoryConfiguration("#package_repository_pluginConfiguration_id", "#pluginConfigurations", url, errorMessageHeading).init();
    });
</script>
