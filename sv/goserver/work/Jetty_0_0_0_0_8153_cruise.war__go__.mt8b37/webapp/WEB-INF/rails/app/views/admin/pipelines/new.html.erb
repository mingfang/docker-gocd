<% @view_title = l.string("ADD_PIPELINE") -%>
<% @page_header = "<h1 id=\"page-title\" class=\"entity_title\">#{l.string("ADD_PIPELINE")}</h1>" -%>

<div class="content_wrapper_inner">
    <% scope = {}; -%><% if @errors && !@errors.empty? %>
    <div class="form_submit_errors">
        <div class="errors">
            <h3><%= l.string("GLOBAL_ERRORS_MESSAGE") -%></h3>
            <ul>
                <% @errors.each do |error| %>
                    <li class="error"><%= h(error.to_s) -%></li>
                <% end %>
            </ul>
        </div>
    </div>
<% end %>

    <% form_for :pipeline_group, @pipeline_group, :url => pipeline_create_path, :html => {:method => :post, :id => "pipeline_edit_form"} do |f| %>
        <%= md5_field -%>
        <div class="steps_wrapper sub_tabs_container">
            <ul class="tabs">
                <li id="step1_link" class="current_tab disabled">
                    <a href="#">
                        <div><%= l.string("WIZARD_STEP", [1]) -%></div><%= l.string("BASIC_SETTINGS") -%></a>
                    <a href="#" class="tab_button_body_match_text">basic-settings</a>
                </li>
                <li id="step2_link" class="subsequent_tab disabled">
                    <a href="#" >
                        <div><%= l.string("WIZARD_STEP", [2]) -%></div><%= l.string("MATERIALS") -%></a>
                    <a href="#" class="tab_button_body_match_text">materials</a>
                </li>
                <li id="step3_link" class="subsequent_tab disabled">
                    <a href="#">
                        <div><%= l.string("WIZARD_STEP", [3]) -%></div><%= l.string("STAGE_AND_JOB") -%></a>
                    <a href="#" class="tab_button_body_match_text">stage-and-job</a>
                </li>
            </ul>
        </div>

        <div class="steps_panes panes sub_tab_container_content">
            <!-- Basic Settings tab -->
            <div id="tab-content-of-basic-settings">
                <% scope = {:pipeline => @pipeline, :form => f, :pipeline_group => @pipeline_group, :step => 1, :title => l.string("BASIC_SETTINGS")}; -%><div class="form_content">
    <div class="fieldset">
        <div class="form_item">
            <% _scope = { :step => scope[:step], :title => scope[:title]}; -%><h2 class="section_title">
  <span class="step_number"><%= l.string("WIZARD_STEP", [_scope[:step]]) -%> </span><%= _scope[:title] -%>
</h2>

        </div>

        <% _scope = {:form => scope[:form], :pipeline => scope[:pipeline], :pipeline_group => scope[:pipeline_group], :pipeline_name_label => "PIPELINE_NAME"}; -%><div class="form_item">
    <div class="form_item_block required">
        <% _scope[:form].fields_for(:pipeline, _scope[:pipeline]) do |p_f| %>
            <%= required_label(p_f, com.thoughtworks.cruise.config.PipelineConfig::NAME, l.string(_scope[:pipeline_name_label])) -%>
            <%= p_f.text_field com.thoughtworks.cruise.config.PipelineConfig::NAME, :class => "required pattern_match uniquePipelineName" -%>
            <%= error_message_on(_scope[:pipeline], com.thoughtworks.cruise.config.PipelineConfig::NAME, :css_class => "form_error") %>
        <% end %>
    </div>
        <div class="form_item_block">
            <%= _scope[:form].label com.thoughtworks.cruise.config.PipelineConfigs::GROUP, l.string("PIPELINE_GROUP_NAME") -%>
            <% if is_user_a_group_admin? %>
                <%= _scope[:form].select com.thoughtworks.cruise.config.PipelineConfigs::GROUP, @groups_list, {:selected => @group_name} %>
            <% else %>  
                <%= _scope[:form].text_field com.thoughtworks.cruise.config.PipelineConfigs::GROUP, :value => @group_name, :class => "required pattern_match", :id => 'pipeline_group_name_text_field' -%>
            <% end %>
            <%= error_message_on(_scope[:pipeline_group], com.thoughtworks.cruise.config.PipelineConfigs::GROUP, :css_class => "form_error") %>
        </div>
</div>

<script type="text/javascript">
    var groups = <%= @groups_json %>
    jQuery("#pipeline_group_name_text_field").autocomplete(groups, {
        minChars: 0,
        width: 400,
        matchContains: "word",
        cacheLength: 0,
        formatItem: function(row, i, max) {
            return  row.group;
        },
        formatMatch: function(row, i, max) {
            return row.group;
        },
        formatResult: function(row) {
            return row.group;
        }
    });
</script>
        <% _scope = {}; -%><p class="required">
	<span class="asterisk"><%= l.string("REQUIRED_FIELD")%></span><%= l.string("REQUIRED_FIELD_MESSAGE")-%>
</p>
    </div>
</div>


                <% scope = {:current_tab_name => "settings", :needs_next => true}; -%><div class="form_buttons actions">
    <% if scope[:needs_next] %>
        <button id="<%= "next_to_#{scope[:current_tab_name]}" -%>" class="right primary next submit"><span><%= l.string('NEXT_BUTTON') -%></span></button>
    <% end %>
    <% if scope[:needs_finish] %>
        <%= submit_button(l.string("FINISH_BUTTON"), :class => 'primary finish') %>
    <% end %>
    <% if scope[:needs_prev] %>
        <button id="<%= "prev_to_#{scope[:current_tab_name]}" -%>" class="right primary prev submit"><span><%= l.string('PREV_BUTTON') -%></span></button>
    <% end %>

    <button class="left submit cancel_button"><span><%= l.string('CANCEL') -%></span></button>
</div>

            </div>
            <!-- Materials tab -->
            <div id="tab-content-of-materials">
                <% scope = {:pipeline => @pipeline, :form => f, :step => 2, :title => l.string("MATERIALS")}; -%><div class="form_content">
    <% scope[:form].fields_for(:pipeline, scope[:pipeline]) do |p_f| %>
        <% material_configs = scope[:pipeline].materialConfigs()
           svn_material = material_configs.getSvnMaterial()
           tfs_material = material_configs.getTfsMaterial()
           hg_material = material_configs.getHgMaterial()
           git_material = material_configs.getGitMaterial()
           p4_material = material_configs.getP4Material()
           dependency_material = material_configs.getDependencyMaterial()
           package_material = material_configs.getPackageMaterial()
        -%>
        <div id="material_forms" class=fieldset>
            <div class="form_item">
                <% _scope = {:step => scope[:step], :title => scope[:title]}; -%><h2 class="section_title">
  <span class="step_number"><%= l.string("WIZARD_STEP", [_scope[:step]]) -%> </span><%= _scope[:title] -%>
</h2>

            </div>
            <% p_f.fields_for(:materials, material_configs) do |materials_form| %>
                <div class="form_item required">
                    <%= label_tag random_dom_id('material_type_'), l.string("MATERIAL_TYPE")+"<span class=\"asterisk\">*</span>" %>
                    <%= select(materials_form.object_name, com.thoughtworks.cruise.config.materials.AbstractMaterialConfig::MATERIAL_TYPE, material_options, {:selected => material_configs.getMaterialOptions()}, {:class => "material_type", :id => "material_type_options"}) %>
                </div>

                <div class="hidden material_entry SvnMaterial">
                    <% materials_form.fields_for com.thoughtworks.cruise.config.materials.svn.SvnMaterialConfig::TYPE, svn_material do |svn_form| %>
                        <% _scope = {:form => svn_form, :material => svn_material}; -%><div class="form_item">

    <div class="form_item_block required">
        <%= required_label(_scope[:form], com.thoughtworks.cruise.config.materials.svn.SvnMaterialConfig::URL, l.string('URL')) -%>
        <%= _scope[:form].text_field com.thoughtworks.cruise.config.materials.svn.SvnMaterialConfig::URL, {:class => "form_input required svn_url", :omit_id_generation => true} -%>
        <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.svn.SvnMaterialConfig::URL, :css_class => "form_error url") %>
    </div>
    <div class="form_item_block">
        <label><%= l.string('USERNAME') -%></label>
        <%= _scope[:form].text_field(com.thoughtworks.cruise.config.materials.svn.SvnMaterialConfig::USERNAME, {:include_blank => true, :class => "form_input svn_username", :omit_id_generation => true}) -%>
        <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.svn.SvnMaterialConfig::USERNAME, :css_class => "form_error") %>
    </div>

    <% __scope = {:form => _scope[:form], :password_class => 'svn_password'}; -%><%
   __scope[:password_class] ||= 'password'
%>
<div class="form_item_block">
    <label><%= l.string('PASSWORD') -%></label>
    <%= __scope[:form].hidden_field(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::ENCRYPTED_PASSWORD, {:include_blank => true, :class => "form_input encrypted_password"}) -%>
    <%= __scope[:form].password_field(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::PASSWORD, {:include_blank => true, :class => "form_input #{__scope[:password_class]}"}) -%>
    <%= error_message_on(__scope[:form].object, com.thoughtworks.cruise.config.materials.ScmMaterialConfig::PASSWORD, :css_class => "form_error") %>

    <div class="hidden">
        <%= __scope[:form].check_box(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::PASSWORD_CHANGED, {:include_blank => true, :class => "form_input password_changed", :value => "1", :checked => true, :drop_hidden_field => true}) -%>
    </div>
</div>

    <% __scope = {:form => _scope[:form]}; -%><div class="form_item_block checkbox_row material_options">
    <%= __scope[:form].check_box(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE, {:include_blank => true, :class => "form_input"}, "true") -%>
    <label for="material_<%= com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE -%>"><%= l.string('SHOULD_AUTO_UPDATE') -%></label>
    <%= error_message_on(__scope[:form].object, com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE, :css_class => "form_error") %>
</div>


    <% __scope = {:username => ".svn_username", :password => ".svn_password", :url => ".svn_url", :type => "svn", :encrypted_password => "false"}; -%><% check_connection_button_id = "check_connection_" + __scope[:type] -%>
<%= submit_button(l.string("CHECK_CONNECTION"), :type => "button", :id => check_connection_button_id) -%>
<div id="vcsconnection-message_<%=__scope[:type]-%>"></div>
<script type="text/javascript">
    Util.on_load(function() {
        new CheckConnection().hookupCheckConnection("#<%=check_connection_button_id-%>", "<%=params[:pipeline_name]-%>", "<%= __scope[:type] %>", "<%=__scope[:url]-%>", "<%=__scope[:username]-%>",
                "<%=__scope[:password]-%>", "<%=__scope[:encrypted_password]-%>", "<%=__scope[:password_changed]-%>", "<%= __scope[:project_path] -%>", "<%= __scope[:domain] -%>", "<%= __scope[:view] -%>");
    });
</script>
    <div class="clear"></div>
</div>
<% __scope = {}; -%><p class="required">
	<span class="asterisk"><%= l.string("REQUIRED_FIELD")%></span><%= l.string("REQUIRED_FIELD_MESSAGE")-%>
</p>



                        <% _scope = {}; -%><script type="text/javascript">
    Util.on_load(function() {
        jQuery(".has_go_tip").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10});
        jQuery(".has_go_tip_right").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "right"});
        jQuery(".has_go_tip_left").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "left" });
        jQuery(".has_go_tip_top").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "top" });
    });
</script>
                    <% end %>
                </div>

                <div class="hidden material_entry GitMaterial">
                    <% materials_form.fields_for com.thoughtworks.cruise.config.materials.git.GitMaterialConfig::TYPE, git_material do |git_form| %>
                        <% _scope = {:form => git_form, :material => git_material}; -%><div class="form_item_block required">
    <%= required_label(_scope[:form], com.thoughtworks.cruise.config.materials.git.GitMaterialConfig::URL, l.string('URL')) -%>
    <%= _scope[:form].text_field com.thoughtworks.cruise.config.materials.git.GitMaterialConfig::URL, {:class => "form_input required git_url", :omit_id_generation => true} -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.git.GitMaterialConfig::URL, :css_class => "form_error") %>
</div>
<div class="form_item_block">
    <label><%= l.string('BRANCH') -%></label>
    <%= _scope[:form].text_field com.thoughtworks.cruise.config.materials.git.GitMaterialConfig::BRANCH, {:class => "form_input", :omit_id_generation => true} -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.git.GitMaterialConfig::BRANCH, :css_class => "form_error") %>
</div>

<% __scope = {:form => _scope[:form]}; -%><div class="form_item_block checkbox_row material_options">
    <%= __scope[:form].check_box(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE, {:include_blank => true, :class => "form_input"}, "true") -%>
    <label for="material_<%= com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE -%>"><%= l.string('SHOULD_AUTO_UPDATE') -%></label>
    <%= error_message_on(__scope[:form].object, com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE, :css_class => "form_error") %>
</div>

<% __scope = {:url => ".git_url", :type => "git"}; -%><% check_connection_button_id = "check_connection_" + __scope[:type] -%>
<%= submit_button(l.string("CHECK_CONNECTION"), :type => "button", :id => check_connection_button_id) -%>
<div id="vcsconnection-message_<%=__scope[:type]-%>"></div>
<script type="text/javascript">
    Util.on_load(function() {
        new CheckConnection().hookupCheckConnection("#<%=check_connection_button_id-%>", "<%=params[:pipeline_name]-%>", "<%= __scope[:type] %>", "<%=__scope[:url]-%>", "<%=__scope[:username]-%>",
                "<%=__scope[:password]-%>", "<%=__scope[:encrypted_password]-%>", "<%=__scope[:password_changed]-%>", "<%= __scope[:project_path] -%>", "<%= __scope[:domain] -%>", "<%= __scope[:view] -%>");
    });
</script>

<% __scope = {}; -%><script type="text/javascript">
    Util.on_load(function() {
        jQuery(".has_go_tip").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10});
        jQuery(".has_go_tip_right").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "right"});
        jQuery(".has_go_tip_left").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "left" });
        jQuery(".has_go_tip_top").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "top" });
    });
</script>
                    <% end %>
                </div>

                <div class="hidden material_entry HgMaterial">
                    <% materials_form.fields_for com.thoughtworks.cruise.config.materials.mercurial.HgMaterialConfig::TYPE, hg_material do |hg_form| %>
                        <% _scope = {:form => hg_form, :material => hg_material}; -%><div class="form_item_block required">
    <%= required_label(_scope[:form], com.thoughtworks.cruise.config.materials.mercurial.HgMaterialConfig::URL, l.string('URL')) -%>
    <%= _scope[:form].text_field com.thoughtworks.cruise.config.materials.mercurial.HgMaterialConfig::URL, {:class => "form_input required hg_url", :omit_id_generation => true} -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.mercurial.HgMaterialConfig::URL, :css_class => "form_error") %>
</div>

<% __scope = {:form => _scope[:form]}; -%><div class="form_item_block checkbox_row material_options">
    <%= __scope[:form].check_box(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE, {:include_blank => true, :class => "form_input"}, "true") -%>
    <label for="material_<%= com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE -%>"><%= l.string('SHOULD_AUTO_UPDATE') -%></label>
    <%= error_message_on(__scope[:form].object, com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE, :css_class => "form_error") %>
</div>

<% __scope = {:url => ".hg_url", :type => "hg"}; -%><% check_connection_button_id = "check_connection_" + __scope[:type] -%>
<%= submit_button(l.string("CHECK_CONNECTION"), :type => "button", :id => check_connection_button_id) -%>
<div id="vcsconnection-message_<%=__scope[:type]-%>"></div>
<script type="text/javascript">
    Util.on_load(function() {
        new CheckConnection().hookupCheckConnection("#<%=check_connection_button_id-%>", "<%=params[:pipeline_name]-%>", "<%= __scope[:type] %>", "<%=__scope[:url]-%>", "<%=__scope[:username]-%>",
                "<%=__scope[:password]-%>", "<%=__scope[:encrypted_password]-%>", "<%=__scope[:password_changed]-%>", "<%= __scope[:project_path] -%>", "<%= __scope[:domain] -%>", "<%= __scope[:view] -%>");
    });
</script>

<% __scope = {}; -%><script type="text/javascript">
    Util.on_load(function() {
        jQuery(".has_go_tip").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10});
        jQuery(".has_go_tip_right").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "right"});
        jQuery(".has_go_tip_left").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "left" });
        jQuery(".has_go_tip_top").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "top" });
    });
</script>
                    <% end %>
                </div>

                <div class="hidden material_entry P4Material">
                    <% materials_form.fields_for com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::TYPE, p4_material do |p4_form| %>
                        <% _scope = {:form => p4_form, :material => p4_material}; -%><div class="form_item_block required">
    <%= required_label(_scope[:form], com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::SERVER_AND_PORT, l.string('P4_SERVER_AND_PORT')) -%>
    <%= _scope[:form].text_field com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::SERVER_AND_PORT, {:class => "form_input required p4_url", :omit_id_generation => true} -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::SERVER_AND_PORT, :css_class => "form_error") %>
</div>

<div class="form_item_block">
    <label><%= l.string('USERNAME') -%></label>
    <%= _scope[:form].text_field com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::USERNAME, {:class => "form_input p4_username", :omit_id_generation => true} -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::USERNAME, :css_class => "form_error") %>
</div>

<% __scope = {:form => _scope[:form], :password_class => 'p4_password'}; -%><%
   __scope[:password_class] ||= 'password'
%>
<div class="form_item_block">
    <label><%= l.string('PASSWORD') -%></label>
    <%= __scope[:form].hidden_field(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::ENCRYPTED_PASSWORD, {:include_blank => true, :class => "form_input encrypted_password"}) -%>
    <%= __scope[:form].password_field(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::PASSWORD, {:include_blank => true, :class => "form_input #{__scope[:password_class]}"}) -%>
    <%= error_message_on(__scope[:form].object, com.thoughtworks.cruise.config.materials.ScmMaterialConfig::PASSWORD, :css_class => "form_error") %>

    <div class="hidden">
        <%= __scope[:form].check_box(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::PASSWORD_CHANGED, {:include_blank => true, :class => "form_input password_changed", :value => "1", :checked => true, :drop_hidden_field => true}) -%>
    </div>
</div>

<div class="form_item_block required">
    <%= required_label(_scope[:form], com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::VIEW, l.string('P4_VIEW')) -%>
    <% error = _scope[:material].getP4MaterialView().errors().on(com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::VIEW)
       if error
           _scope[:material].errors().add(com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::VIEW, error)
       end
    %>
    <%= _scope[:form].text_area com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::VIEW, {:class => "form_input required p4_view", :omit_id_generation => true, :rows => 4} -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::VIEW, :css_class => "form_error") %>
</div>

<div class="form_item_block checkbox_row user_tickets">
    <%= _scope[:form].check_box com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::USE_TICKETS, {:id => "material_useTickets"}, "true" -%>
    <label for="material_<%= com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::USE_TICKETS -%>"><%= l.string('P4_USE_TICKETS') -%></label>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.perforce.P4MaterialConfig::USE_TICKETS, :css_class => "form_error") %>
</div>

<% __scope = {:form => _scope[:form]}; -%><div class="form_item_block checkbox_row material_options">
    <%= __scope[:form].check_box(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE, {:include_blank => true, :class => "form_input"}, "true") -%>
    <label for="material_<%= com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE -%>"><%= l.string('SHOULD_AUTO_UPDATE') -%></label>
    <%= error_message_on(__scope[:form].object, com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE, :css_class => "form_error") %>
</div>

<% __scope = {:username => ".p4_username", :password => ".p4_password", :url => ".p4_url", :type => "p4", :encrypted_password => "false", :view => ".p4_view"}; -%><% check_connection_button_id = "check_connection_" + __scope[:type] -%>
<%= submit_button(l.string("CHECK_CONNECTION"), :type => "button", :id => check_connection_button_id) -%>
<div id="vcsconnection-message_<%=__scope[:type]-%>"></div>
<script type="text/javascript">
    Util.on_load(function() {
        new CheckConnection().hookupCheckConnection("#<%=check_connection_button_id-%>", "<%=params[:pipeline_name]-%>", "<%= __scope[:type] %>", "<%=__scope[:url]-%>", "<%=__scope[:username]-%>",
                "<%=__scope[:password]-%>", "<%=__scope[:encrypted_password]-%>", "<%=__scope[:password_changed]-%>", "<%= __scope[:project_path] -%>", "<%= __scope[:domain] -%>", "<%= __scope[:view] -%>");
    });
</script>

<% __scope = {}; -%><script type="text/javascript">
    Util.on_load(function() {
        jQuery(".has_go_tip").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10});
        jQuery(".has_go_tip_right").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "right"});
        jQuery(".has_go_tip_left").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "left" });
        jQuery(".has_go_tip_top").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "top" });
    });
</script>
                    <% end %>
                </div>

                <div class="hidden material_entry TfsMaterial">
                    <% materials_form.fields_for com.thoughtworks.cruise.config.materials.tfs.TfsMaterialConfig::TYPE, tfs_material do |tfs_form| %>
                        <% _scope = {:form => tfs_form, :material => tfs_material}; -%><div class="form_item_block required">
    <%= required_label(_scope[:form], com.thoughtworks.cruise.config.materials.ScmMaterialConfig::URL, l.string('URL')) -%>
    <%= _scope[:form].text_field com.thoughtworks.cruise.config.materials.ScmMaterialConfig::URL, {:class => "form_input required tfs_url", :omit_id_generation => true} -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.ScmMaterialConfig::URL, :css_class => "form_error") %>
</div>

<div class="form_item_block">
    <label><%= l.string('DOMAIN') -%></label>
    <%= _scope[:form].text_field(com.thoughtworks.cruise.config.materials.tfs.TfsMaterialConfig::DOMAIN, {:include_blank => true, :class => "form_input tfs_domain", :omit_id_generation => true}) -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.tfs.TfsMaterialConfig::DOMAIN, :css_class => "form_error") %>
</div>

<div class="form_item_block required">
    <%= required_label(_scope[:form], com.thoughtworks.cruise.config.materials.ScmMaterialConfig::USERNAME, l.string('USERNAME')) -%>
    <%= _scope[:form].text_field com.thoughtworks.cruise.config.materials.ScmMaterialConfig::USERNAME, {:class => "form_input required tfs_username", :omit_id_generation => true} -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.ScmMaterialConfig::USERNAME, :css_class => "form_error") %>
</div>

<% __scope = {:form => _scope[:form], :password_class => 'tfs_password'}; -%><%
   __scope[:password_class] ||= 'password'
%>
<div class="form_item_block">
    <label><%= l.string('PASSWORD') -%></label>
    <%= __scope[:form].hidden_field(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::ENCRYPTED_PASSWORD, {:include_blank => true, :class => "form_input encrypted_password"}) -%>
    <%= __scope[:form].password_field(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::PASSWORD, {:include_blank => true, :class => "form_input #{__scope[:password_class]}"}) -%>
    <%= error_message_on(__scope[:form].object, com.thoughtworks.cruise.config.materials.ScmMaterialConfig::PASSWORD, :css_class => "form_error") %>

    <div class="hidden">
        <%= __scope[:form].check_box(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::PASSWORD_CHANGED, {:include_blank => true, :class => "form_input password_changed", :value => "1", :checked => true, :drop_hidden_field => true}) -%>
    </div>
</div>

<div class="form_item_block required">
    <%= required_label(_scope[:form], com.thoughtworks.cruise.config.materials.tfs.TfsMaterialConfig::PROJECT_PATH, l.string('TFS_PROJECT_PATH')) -%>
    <%= _scope[:form].text_field com.thoughtworks.cruise.config.materials.tfs.TfsMaterialConfig::PROJECT_PATH, {:class => "form_input required tfs_project_path", :omit_id_generation => true} -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.tfs.TfsMaterialConfig::PROJECT_PATH, :css_class => "form_error") %>
</div>

<% __scope = {:form => _scope[:form]}; -%><div class="form_item_block checkbox_row material_options">
    <%= __scope[:form].check_box(com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE, {:include_blank => true, :class => "form_input"}, "true") -%>
    <label for="material_<%= com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE -%>"><%= l.string('SHOULD_AUTO_UPDATE') -%></label>
    <%= error_message_on(__scope[:form].object, com.thoughtworks.cruise.config.materials.ScmMaterialConfig::AUTO_UPDATE, :css_class => "form_error") %>
</div>


<% __scope = {:url => ".tfs_url", :type => "tfs", :username => ".tfs_username", :password => ".tfs_password",
                                                                                         :encrypted_password => "false", :password_changed => "false", :project_path => ".tfs_project_path", :domain => ".tfs_domain"}; -%><% check_connection_button_id = "check_connection_" + __scope[:type] -%>
<%= submit_button(l.string("CHECK_CONNECTION"), :type => "button", :id => check_connection_button_id) -%>
<div id="vcsconnection-message_<%=__scope[:type]-%>"></div>
<script type="text/javascript">
    Util.on_load(function() {
        new CheckConnection().hookupCheckConnection("#<%=check_connection_button_id-%>", "<%=params[:pipeline_name]-%>", "<%= __scope[:type] %>", "<%=__scope[:url]-%>", "<%=__scope[:username]-%>",
                "<%=__scope[:password]-%>", "<%=__scope[:encrypted_password]-%>", "<%=__scope[:password_changed]-%>", "<%= __scope[:project_path] -%>", "<%= __scope[:domain] -%>", "<%= __scope[:view] -%>");
    });
</script>

<% __scope = {}; -%><script type="text/javascript">
    Util.on_load(function() {
        jQuery(".has_go_tip").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10});
        jQuery(".has_go_tip_right").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "right"});
        jQuery(".has_go_tip_left").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "left" });
        jQuery(".has_go_tip_top").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "top" });
    });
</script>
                    <% end %>
                </div>

                <div class="hidden material_entry DependencyMaterial">
                    <% materials_form.fields_for com.thoughtworks.cruise.config.materials.dependency.DependencyMaterialConfig::TYPE, dependency_material do |dependency_form| %>
                        <% _scope = {:form => dependency_form, :material => dependency_material}; -%><div class="form_item_block required">
    <label><%= l.string('PIPELINE') -%> <span class="autocomplete_stage">[<%= l.string('STAGE') -%>]</span><span class="asterisk"><%= l.string("REQUIRED_FIELD") -%></span></label>
    <%= _scope[:form].text_field com.thoughtworks.cruise.config.materials.dependency.DependencyMaterialConfig::PIPELINE_STAGE_NAME, :class => "form_input required", :id => "material_pipelineStageName" -%>
    <%= error_message_on(_scope[:material], com.thoughtworks.cruise.config.materials.dependency.DependencyMaterialConfig::PIPELINE_STAGE_NAME, :css_class => "form_error") %>
    <div class="autocomplete"></div>
</div>
<% __scope = {:pipeline_stages_json => @pipeline_stages_json, :selector => "#material_pipelineStageName"}; -%><script type="text/javascript">
    var pipelines = <%= __scope[:pipeline_stages_json]-%>;

    jQuery("<%= __scope[:selector] -%>").autocomplete(pipelines, {
        minChars: 0,
        width: 400,
        matchContains: "word",
        autoFill: false,
        formatItem: function(row, i, max) {
            return  row.pipeline + " <span class='autocomplete_stage'>[" + row.stage + "]</span>";
        },
        formatMatch: function(row, i, max) {
            return row.pipeline + " " + row.stage;
        },
        formatResult: function(row) {
            return row.pipeline + " [" + row.stage + "]";
        }
    });

</script>

                    <% end %>
                </div>

                <div class="hidden material_entry PackageMaterial">
                    <% materials_form.fields_for com.thoughtworks.cruise.config.materials.PackageMaterialConfig::TYPE, package_material do |package_form| %>
                        <% _scope = {:form => package_form, :material => package_material}; -%><%= hidden_field_tag :material_type, _scope[:material].getType() %>
<div class="new_form_content change_materials">
    <%- if repository_packages_map_from_config.empty? -%>
        <p class="warnings">No repositories found. Please <a href='<%=package_repositories_new_path%>'>add a package repository</a> first.</p>
    <%- end -%>

    <div class="new_form_item_block vtop" id="repository_div">
        <div class="new_form_label">
            <%= required_label(_scope[:form], "repository", l.string('REPOSITORY')) -%>
            <div class="inline_instruction">Choose a configured repository</div>
        </div>
        <div class="new_form_control required">
            <%= select_tag "material[package_definition[repositoryId]]", [], {:id => "repository", :class => "required"} %>
        </div>
        <div id="repository_error"></div>
    </div>

    <div class="new_form_item checkbox_row">
        <div class="new_form_label">
            <%= required_label(_scope[:form], "material[packageId]", l.string('PACKAGE')) -%>
        </div>
        <div class="new_form_control required">
            <div class="checkbox_row_inline">
                <%= radio_button_tag "material[create_or_associate_pkg_def]", "associate", true, :id => "chooseExisting" %>
                <label for="chooseExisting"><%= "Choose Existing" -%></label>
            </div>

            <div class="checkbox_row_inline">
                <%= radio_button_tag "material[create_or_associate_pkg_def]", "create", false, :id => "addNew" %>
                <label for="addNew"><%= "Define New" -%></label>
            </div>
        </div>
    </div>

    <div class="new_form_item">
        <div class="new_form_label"></div>
        <div class="new_form_control">
            <%= select_tag "material[packageId]", [], {:id => "package", :class => "required"} -%>
            <%= error_message_on(_scope[:material], "material[package_definition[packageId]]", :css_class => "form_error") %>
        </div>
    </div>

    <%- state = (params[:material] && params[:material][:create_or_associate_pkg_def]) ? params[:material][:create_or_associate_pkg_def] : '' -%>
    <div class="package_definition">
        <div class="package_configuration">
            <% if @package_configuration %>
                <%- if (state == "associate" || state == "") -%>
                    <% __scope = {:package_configuration => @package_configuration}; -%><h2 class="new-admin-subtitle"><span>Package Configuration</span></h2>
<%- if __scope[:package_configuration] %>
    <div class="new_form_item_block">
        <div class="new_form_label">
            <%= label_tag "package_name_label", "Package Name" %>
        </div>
        <div class="new_form_control">
            <%= text_field_tag "package_name_value", __scope[:package_configuration].name, {:disabled => "disabled"} %>
        </div>
    </div>
    <%- __scope[:package_configuration].properties.each do |property| %>
        <div class="new_form_item">
            <div class="new_form_label">
                <%= label_tag "package_#{property.name}_label", property.display_name %>
            </div>
            <div class="new_form_control">
                <%= text_field_tag "package_#{property.name}_value", property.value, {:disabled => "disabled"} %>
            </div>
        </div>
    <%- end %>
<%- end %>
<div class="field no-label-element">
    <%= submit_button(l.string("CHECK_PACKAGE"), :type => "button", :id => "check_package") -%>
    <span id="package_check_message"></span>
</div>


                <%- else -%>
                    <% __scope = {:package_configuration => @package_configuration}; -%><h2 class="new-admin-subtitle"><span>New Package</span></h2>
<p class="information"><%= l.string("NEW_GLOBAL_PACKAGE_WARNING") %></p>
<%- if __scope[:package_configuration] %>
    <div class="new_form_item_block">
        <div class="new_form_label required">
            <%= label_tag "", required_label_text("Package Name") %>
        </div>
        <div class="new_form_control">
            <%= text_field_tag "material[package_definition[name]]", __scope[:package_configuration].name, {:class => "required"} %>
        </div>
    </div>
    <%- __scope[:package_configuration].properties.each_with_index do |property, index| %>
        <div class="new_form_item">
            <%- if property.is_mandatory -%>
                <div class="new_form_label required">
                    <%= label_tag "", required_label_text(property.display_name) %>
                </div>
            <%- else -%>
                <div class="new_form_label">
                    <%= label_tag "", property.display_name %>
                </div>
            <%- end -%>

            <%= hidden_field_tag "material[package_definition[configuration][#{index}][configurationKey][name]]", property.name %>
            <div class="new_form_control">
                <% if property.is_secure %>
                    <%= password_field_tag "material[package_definition[configuration][#{index}][configurationValue][value]]", property.value %>
                    <%= hidden_field_tag "material[package_definition[configuration][#{index}][isChanged]]", true %>
                <% else %>
                    <%- if property.is_mandatory -%>
                        <%= text_field_tag "material[package_definition[configuration][#{index}][configurationValue][value]]", property.value, {:class => "required"} %>
                    <%- else -%>
                        <%= text_field_tag "material[package_definition[configuration][#{index}][configurationValue][value]]", property.value %>
                    <%- end -%>
                <% end %>
            </div>
        </div>
    <%- end %>
<%- end %>
<div class="new_form_item">
    <div class="new_form_label"></div>
    <div class="new_form_control">
        <div class="field no-label-element">
    <%= submit_button(l.string("CHECK_PACKAGE"), :type => "button", :id => "check_package") -%>
    <span id="package_check_message"></span>
</div>
    </div>
</div>

<!--remove this 'style' block when we implement new form style in this form-->
<style type="text/css">
    .new_form_item .error_message{
        word-break: break-all;
    }
</style>
                <%- end -%>
            <% end %>
        </div>
    </div>

</div>
<% __scope = {}; -%><script type="text/javascript">
    Util.on_load(function() {
        jQuery(".has_go_tip").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10});
        jQuery(".has_go_tip_right").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "right"});
        jQuery(".has_go_tip_left").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "left" });
        jQuery(".has_go_tip_top").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "top" });
    });
</script>

<script type="text/javascript">
    var data = <%= repository_packages_map_from_config.to_json %>;
    var repo = <%= _scope[:material].getPackageDefinition() && _scope[:material].getPackageDefinition().getRepository() ? _scope[:material].getPackageDefinition().getRepository().getId().to_json  : "".to_json-%>;
    var pkg = <%= _scope[:material].getPackageDefinition() ? _scope[:material].getPackageDefinition().getId().to_json : "".to_json -%>;
    var initialState = <%= (params[:material] && params[:material][:create_or_associate_pkg_def]) ? params[:material][:create_or_associate_pkg_def].to_json : "".to_json -%>;
    var showPackageDefPath = <%= package_definitions_show_for_new_pipeline_wizard_path(:repo_id => "$repoId$", :package_id => "$packageId$").to_json %>;
    var newPackageDefPath = <%= package_definitions_new_for_new_pipeline_wizard_path(:repo_id => "$repoId$").to_json %>;
    var pluginMissingErrorMessage = <%= l.string("ASSOCIATED_PLUGIN_NOT_FOUND").to_json %>;
    Util.on_load(function () {
        new PackageMaterialCheckConnection("<%= package_definition_check_connection_path %>").bind(".new_form_content.change_materials", "#check_package", "#package_check_message");
        new PackageMaterialDefinitionForNewPipelineWizard(data, repo, pkg, showPackageDefPath, newPackageDefPath, pluginMissingErrorMessage).init(initialState);
    });
</script>
                    <% end %>
                </div>

            <% end %>
        </div>
    <% end %>
</div>
<script type="text/javascript">
    Util.on_load(function() {
        new TaskEditor.TypeEditor({container: jQuery('#material_forms'), switch_control: jQuery('#material_type_options'), entry_to_be_hidden: '.material_entry'});
    });
</script>


                <% scope = {:current_tab_name => "materials", :needs_next => true, :needs_prev => true}; -%><div class="form_buttons actions">
    <% if scope[:needs_next] %>
        <button id="<%= "next_to_#{scope[:current_tab_name]}" -%>" class="right primary next submit"><span><%= l.string('NEXT_BUTTON') -%></span></button>
    <% end %>
    <% if scope[:needs_finish] %>
        <%= submit_button(l.string("FINISH_BUTTON"), :class => 'primary finish') %>
    <% end %>
    <% if scope[:needs_prev] %>
        <button id="<%= "prev_to_#{scope[:current_tab_name]}" -%>" class="right primary prev submit"><span><%= l.string('PREV_BUTTON') -%></span></button>
    <% end %>

    <button class="left submit cancel_button"><span><%= l.string('CANCEL') -%></span></button>
</div>

            </div>
            <!-- Stage/Job tab -->
            <div id="tab-content-of-stage-and-job">
                <% scope = {:pipeline => @pipeline, :form => f, :step => 3, :title => l.string("STAGE_AND_JOB")}; -%><% scope[:form].fields_for(:pipeline, scope[:pipeline]) do |p_f| %>
    <div class="fieldset">
        <div class="form_item">
            <% _scope = {:step => scope[:step], :title => scope[:title]}; -%><h2 class="section_title">
  <span class="step_number"><%= l.string("WIZARD_STEP", [_scope[:step]]) -%> </span><%= _scope[:title] -%>
</h2>

        </div>
        <div class="form_item checkbox_row define_or_template">
            <label><%= l.string("CONFIGURATION_TYPE") %></label>
            <%= p_f.radio_button com.thoughtworks.cruise.config.PipelineConfig::CONFIGURATION_TYPE, com.thoughtworks.cruise.config.PipelineConfig::CONFIGURATION_TYPE_STAGES, :id => "pipeline_configurationType_stages", :title => l.string("DEFINE_STAGES") %>
            <%= label_tag("pipeline_configurationType_stages", l.string("DEFINE_STAGES")) -%>
            <%= p_f.radio_button com.thoughtworks.cruise.config.PipelineConfig::CONFIGURATION_TYPE, com.thoughtworks.cruise.config.PipelineConfig::CONFIGURATION_TYPE_TEMPLATE, :id => "pipeline_configurationType_template", :title => l.string("USE_TEMPLATE") %>
            <%= label_tag("pipeline_configurationType_template", l.string("USE_TEMPLATE")) -%>
        </div>

        <% _scope = {:form => p_f, :template_list => @template_list, :pipeline => @pipeline}; -%><div id="select_template_container">
    <%- if _scope[:template_list].size()== 0 %>
        <div class="information">There are no templates configured</div>
    <% else %>
        <div class="fieldset">
            <div class="form_item">

                <%= _scope[:form].label l.string("SELECT_TEMPLATE") %>
                <%- _scope[:template_names] = _scope[:template_list].map(&:name) -%>
                <%= _scope[:form].select(com.thoughtworks.cruise.config.PipelineConfig::TEMPLATE_NAME, _scope[:template_names], {:selected => _scope[:pipeline].getTemplateName()}, {:id => "select_template"}) %>
                <%= link_to l.string("VIEW"), "#", :class=> "view_template_link action_icon button preview_icon" , :style=> "float:none; display:inline-block; margin-right:5px; margin-left:5px"%>
            </div>


            <%- _scope[:name_body_map] = _scope[:template_list].inject({}) do |map, template| %>
                <%- _scope[:dom_container_id] = random_dom_id("template_body_") -%>
                <textarea class="hidden" id="<%= _scope[:dom_container_id] -%>">
                    <%- if template.referredParams().size() > 0 %>
                        <label><%= l.string("DEFINE_PARAMETERS") %></label>
                        <%- template.referredParams().each do |param| -%>
                            <div>
                                <%- _scope[:form].fields_for "params", param, :index => "" do |form| -%>
                                    <%= form.text_field :name, :class => "", :omit_id_generation => true, :readonly => true -%>
                                    <span class="equals_sign"><%= l.string("EQUALS_SIGN") -%></span>
                                    <%= form.text_field :valueForDisplay, :class => "", :omit_id_generation => true -%>
                                <% end %>
                            </div>
                        <%- end -%>
                    <% end %>
                </textarea>
                <%- map.merge(template.name() => _scope[:dom_container_id]) -%>
            <%- end -%>
            <div id="used_params">
            </div>
        </div>
        <script type="text/javascript">
            Util.on_load(function () {
                var callback = Util.domUpdatingCallback(<%= _scope[:name_body_map].to_json -%>, jQuery('#used_params'), function () {
                    return this.value;
                });
                var template_selector = jQuery('#select_template');
                template_selector.change(callback);
                callback.apply(template_selector.get(0));

                new ViewTemplate("<%= config_view_templates_show_path(:name => "__template_name__") %>").addListener('a.view_template_link');

            });
        </script>
    <% end %>
</div>

        <div id="stage_job_form">
            <% scope[:stage] = scope[:pipeline].isEmpty() ? default_stage_config : scope[:pipeline].get(0) -%>
            <% p_f.fields_for(:stage, scope[:stage]) do |s_f| %>
                <div class="stage fieldset">
                    <div class="form_item required">
                        <%= label_tag stage_name_id = random_dom_id("stage_name_"), required_label_text(l.string('STAGE_NAME')) %>
                        <%= s_f.text_field com.thoughtworks.cruise.config.StageConfig::NAME, :class => "form_input required pattern_match", :id => stage_name_id -%>
                        <%= error_message_on(scope[:stage], "name", :css_class => "form_error") %>
                    </div>
                    <div class="form_item checkbox_row">
                        <label><%= l.string('STAGE_TRIGGER_TYPE:') -%></label>

                        <% s_f.fields_for com.thoughtworks.cruise.config.StageConfig::APPROVAL, scope[:stage].approval do |approval| %>
                            <%= approval.radio_button com.thoughtworks.cruise.config.Approval::TYPE, com.thoughtworks.cruise.config.Approval::SUCCESS, :id => "auto" %>
                            <label for="auto"><%= l.string('AUTO') -%></label>

                            <%= approval.radio_button com.thoughtworks.cruise.config.Approval::TYPE, com.thoughtworks.cruise.config.Approval::MANUAL, :id => "manual" %>
                            <label for="manual"><%= l.string('MANUAL') -%></label>
                            <span class="stage_approval contextual_help has_go_tip_right" title="<%= l.string("RADIO_BUTTON_TITLE_APPROVAL") -%>">&nbsp;</span>
                            <%= error_message_on(scope[:stage].getApproval(), "type", :css_class => "form_error") %>
                        <% end %>
                    </div>
                    <p class="required">
	<span class="asterisk"><%= l.string("REQUIRED_FIELD")%></span><%= l.string("REQUIRED_FIELD_MESSAGE")-%>
</p>
                </div>

                <h3><%= l.string('INITIAL_JOB_AND_TASK') -%></h3>

                <div class="instructions"><%= l.string('INSTRUCTION_JOB_AND_TASK') -%></div>
                <div class="fieldset has_nested_fieldset">
                    <% scope[:stage].getJobs().each do |job| -%>
                        <%- s_f.fields_for com.thoughtworks.cruise.config.StageConfig::JOBS, job, :index => "" do |job_form| -%>
                            <div class="form_item required">
                                <%= label_tag job_name_id = random_dom_id("job_name_"), required_label_text(l.string('JOB_NAME')) %>
                                <%= job_form.text_field(com.thoughtworks.cruise.config.JobConfig::NAME, :class => "required pattern_match", :id => job_name_id) %>
                                <%= error_message_on(job, com.thoughtworks.cruise.config.JobConfig::NAME, :css_class => "form_error") %>
                            </div>
                            <% _scope = {:job => job, :job_form => job_form, :hide_runif => true}; -%><div class="form_item_block">
    <% tasks = _scope[:job].getTasks()%>
    
    <% _scope[:job_form].fields_for com.thoughtworks.cruise.config.JobConfig::TASKS, tasks do |tasks_form| %>
        <div class="fieldset">
            <div class="form_item required">
                <%= label_tag random_dom_id('task_type_'), l.string("TASK_TYPE")+"<span class=\"asterisk\">*</span>" %>
                <%= tasks_form.select(com.thoughtworks.cruise.config.Tasks::TASK_OPTIONS, task_options, {:selected => tasks.getTaskOptions()}, {:class => "task_type", :id => "job_task_options"}) %>
            </div>
            <div id="job_tasks">
                <% @task_view_models.each do |tvm|
                   taskk = tvm.getModel()
                   task_class_name = taskk.java_class.simple_name
                   next if task_class_name == "FetchTask"
                %>
                    <div class="hidden task_entry <%=task_class_name-%>">
                        <% tasks_form.fields_for task_class_name, taskk do |task_form| %>
                            <%= render_pluggable_form_template(task_view_service.getViewModel(taskk, 'new'), form_name_provider(task_form), { :scope => {:task => taskk, :form => task_form, :hide_runif => _scope[:hide_runif]}}) -%>
                        <% end %>
                    </div>
                <% end %>
            </div>
        </div>

    <% end %>
    <script type="text/javascript">
        Util.on_load(function() {
            new TaskEditor.TypeEditor({container: jQuery('#job_tasks'), switch_control: jQuery('#job_task_options'), entry_to_be_hidden: '.task_entry'});
        });
    </script>
</div>

                        <%- end -%>
                    <%- end -%>
                </div>
            <% end %>
        </div>
    </div>
    <% _scope = {}; -%><script type="text/javascript">
    Util.on_load(function() {
        jQuery(".has_go_tip").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10});
        jQuery(".has_go_tip_right").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "right"});
        jQuery(".has_go_tip_left").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "left" });
        jQuery(".has_go_tip_top").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "top" });
    });
</script>
<% end %>

<script type="text/javascript">
    Util.on_load(function() {
        var hasSwitchedToTemplate = false;
        setConfigurationType = function(element, isFirstTime) {
            var selected = jQuery(element).val();
            if (selected == "<%=com.thoughtworks.cruise.config.PipelineConfig::CONFIGURATION_TYPE_STAGES%>") {
                showElement(jQuery("#select_template_container"), false);
                showElement(jQuery("#stage_job_form"), true);
            } else if (selected == "<%=com.thoughtworks.cruise.config.PipelineConfig::CONFIGURATION_TYPE_TEMPLATE%>") {
                showElement(jQuery("#select_template_container"), true);
                showElement(jQuery("#stage_job_form"), false);
                if (!isFirstTime) {
                    hasSwitchedToTemplate = true;
                }
            }
        };
        setConfigurationType(jQuery("input:[name='pipeline_group[pipeline][configurationType]']:checked"), true);

        jQuery("input:[name='pipeline_group[pipeline][configurationType]']").click(function() {
            setConfigurationType(this, false);
        });
    });
    AjaxForm.error_box_selector = '#MB_content';
</script>

                <% scope = {:current_tab_name => "stage_and_job", :needs_prev => true, :needs_finish => true}; -%><div class="form_buttons actions">
    <% if scope[:needs_next] %>
        <button id="<%= "next_to_#{scope[:current_tab_name]}" -%>" class="right primary next submit"><span><%= l.string('NEXT_BUTTON') -%></span></button>
    <% end %>
    <% if scope[:needs_finish] %>
        <%= submit_button(l.string("FINISH_BUTTON"), :class => 'primary finish') %>
    <% end %>
    <% if scope[:needs_prev] %>
        <button id="<%= "prev_to_#{scope[:current_tab_name]}" -%>" class="right primary prev submit"><span><%= l.string('PREV_BUTTON') -%></span></button>
    <% end %>

    <button class="left submit cancel_button"><span><%= l.string('CANCEL') -%></span></button>
</div>

            </div>
        </div>
    <% end %>
</div>

<script type="text/javascript">
    Util.on_load(function() {
        jQuery.validator.defaults.onsubmit = false;

        <% if flash[:error].nil? %>
          var tab_manager = new TabsManager('basic-settings', 'materials', 'stage-and-job');
          var wizard = new TabsWizard.NewPipelineWizard(tab_manager);

          wizard.addExtraValidations(<%= @all_pipelines.map{|item| item.downcase}.to_json %>);
          wizard.wireButtonsWithValidations([{next_to_settings: "materials"}, {next_to_materials: "stage-and-job"}]);
          wizard.wireButtons({prev_to_materials: "basic-settings", prev_to_stage_and_job: "materials" });
          wizard.hookupFinishValidations();
          wizard.hookupCancel("cancel_button", "<%= pipeline_groups_path %>");
        <% else %>
          jQuery(".sub_tabs_container").hide();
          jQuery(".form_buttons").hide();
          jQuery(".form_buttons:last").show();
          jQuery(".form_buttons:last .prev").hide();
          jQuery('.cancel_button').click(function() {
            window.location.href = "<%= pipeline_groups_path %>";
            return false;
          });
        <% end %>
    });
</script>