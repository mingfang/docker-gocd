<h3><%= l.string('PERMISSIONS') %></h3>

    <div class="instructions"><%= l.string("ADMIN_GROUP_ADMINS_CAN_OPERATE_MESSAGE") %></div>
    <% form_for(:stage, @stage,
                :url => admin_stage_update_path,
                :html => {:method => "PUT",
                          :id => "stage_permissions_edit_form",
                          :onsubmit => "return AjaxForm.jquery_ajax_submit(this, AjaxForm.ConfigFormEditHandler);",
                          :class => "popup_form"}) do |f| %>
        <%= md5_field %>
        <div class="fieldset">
            <% stage_has_auth_defined = @stage.hasOperatePermissionDefined() %>
            <div class="form_item security_mode checkbox_row">
                <span class="form_body_text"><%= l.string("FOR_THIS_STAGE") %></span>
                <%= radio_button_tag("stage[#{com.thoughtworks.cruise.config.StageConfig::SECURITY_MODE}]", "inherit", !stage_has_auth_defined, :id => "inherit_permissions", :class => "stage_security_mode") %>
                <%= label_tag("inherit", "#{l.string("INHERIT_FROM_THE_PIPELINE_GROUP")}", :for => "inherit_permissions") %>
                <%= radio_button_tag("stage[#{com.thoughtworks.cruise.config.StageConfig::SECURITY_MODE}]", "define", stage_has_auth_defined, :id => "define_permissions", :class => "stage_security_mode") %>
                <%= label_tag("", "#{l.string("SPECIFY_LOCALLY")}", :for => "define_permissions") %>
            </div>
            <div class="form_item">
                <div class="inherited_permissions<%= " hidden" if stage_has_auth_defined %>">
                    <% unless @pipeline_group && @pipeline_group.hasOperationPermissionDefined() %>
                        <div class="no_permissions_message information"><%= l.string("NO_OPERATE_PERMISSIONS_ON_GROUP_AND_STAGE") -%></div>
                    <% else %>
                        <% scope = {:pipeline_group => @pipeline_group, :form => f}; -%><div class="users">
    <label><%= l.string("USERS") -%></label>
    <table class="users_and_roles">
        <tbody>
        <%- scope[:pipeline_group].getOperateUsers().each do |permission| -%>
            <%- scope[:form].fields_for com.thoughtworks.cruise.config.StageConfig::OPERATE_USERS, permission, :index => "" do |permissions_form| -%>
                <tr>
                    <td class="name_cell">
                        <%= permissions_form.text_field :name, :class => "form_input user_role_name", :omit_id_generation => true, :disabled => "disabled" -%>
                    </td>
                </tr>
            <%- end -%>
        <%- end -%>
        </tbody>
    </table>
</div>
<div class="roles">
    <label><%= l.string("ROLES") -%></label>
    <table class="users_and_roles">
        <tbody>
        <%- scope[:pipeline_group].getOperateRoles().each do |permission| -%>
            <%- scope[:form].fields_for com.thoughtworks.cruise.config.StageConfig::OPERATE_ROLES, permission, :index => "" do |permissions_form| -%>
                <tr>
                    <td class="name_cell">
                        <%= permissions_form.text_field :name, :class => "form_input user_role_name", :omit_id_generation => true, :disabled => "disabled" -%>
                    </td>
                </tr>
            <%- end -%>
        <%- end -%>
        </tbody>
    </table>
</div>
                    <% end %>
                </div>
                <div class="stage_permissions <%= " hidden" if !stage_has_auth_defined %>">
                    <% if @pipeline_group && @pipeline_group.hasOperationPermissionDefined() %>
                        <div class="information"><%= l.string("ONLY_PIPELINE_GROUP_OPERATORS_AVAILABLE") -%></div>
                    <% end %>
                    <% if @pipeline_group && @pipeline_group.hasOperationPermissionDefined() and !stage_has_auth_defined %>
                        <% scope = {:stage => @stage, :form => f, :user_collection => @pipeline_group.getOperateUsers(),
                                                                                               :role_collection => @pipeline_group.getOperateRoles()}; -%><div class="users">
    <label><%= l.string("USERS") -%></label>
    <% _scope = {:stage => scope[:stage],
                                                                            :form => scope[:form],
                                                                            :collection => scope[:user_collection],
                                                                            :field_name => com.thoughtworks.cruise.config.StageConfig::OPERATE_USERS,
                                                                            :id_prefix => "user",
                                                                            :autocomplete_suggestions => @autocomplete_users}; -%><div class="form_content">
    <div class="user_permissions_section popup_form">
        <textarea id="<%= _scope[:id_prefix] %>_users_and_roles_template" class="template">
            <%- _scope[:form].fields_for _scope[:field_name], :index => "" do |permissions_form| -%>
                <td class="name_cell">
                    <%= permissions_form.text_field :name, :class => "form_input permissions_#{_scope[:id_prefix]}_name", :omit_id_generation => true -%>
                </td>
                <td class="name_cell">
                    <span class="icon_remove delete_parent"></span>
                </td>
            <%- end -%>
        </textarea>
        <table class="users_and_roles">
            <tbody class="<%= _scope[:id_prefix] %>_users_and_roles">
            <%- _scope[:collection].each do |permission| -%>
                <%- _scope[:form].fields_for _scope[:field_name], permission, :index => "" do |permissions_form| -%>
                    <tr>
                        <td class="name_cell">
                            <%= permissions_form.text_field :name, :class => "form_input permissions_#{_scope[:id_prefix]}_name", :omit_id_generation => true -%>
                            <%= error_message_on(permission, "name", :css_class => "name_value_error") %>
                        </td>
                        <td class="name_cell align_top">
                            <span class="icon_remove delete_parent"></span>
                        </td>
                    </tr>
                <%- end -%>
            <%- end -%>
            </tbody>
        </table>
        <!-- <a class="add_item skip_dirty_stop" id="<%= _scope[:id_prefix] %>_add_users_and_roles"><%= l.string("ADD") -%></a> -->

		<%= action_icon({:type => "add", :text => l.string("ADD") , :href => "javascript:void(0);", :id => _scope[:id_prefix]+"_add_users_and_roles", :class => "skip_dirty_stop" }) %>
    </div>
</div>
<script type="text/javascript">
    Util.on_load(function() {
        function hookupPermissionsAutoComplete() {
            jQuery(<%="\".permissions_#{_scope[:id_prefix]}_name\"" -%>).autocomplete(<%= _scope[:autocomplete_suggestions] -%>, {
                minChars: 0,
                width: 400,
                matchContains: "word",
                max: 50,
                autoFill: false});
        };
        
        function setupVarForm(finish_button) {
            var rowCreator = new EnvironmentVariables.RowCreator(jQuery('#<%= _scope[:id_prefix] %>_users_and_roles_template'), 'tr', '.delete_parent');
            var variables = new EnvironmentVariables(
                    jQuery('tbody.<%= _scope[:id_prefix] %>_users_and_roles'),
                    rowCreator,
                    null,
                    function(inputs) {
                        inputs.dirty_form();
                        hookupPermissionsAutoComplete();
                    },
                    function(row) {
                        row.parents("form.dirtyform").data("dirty", true);
                    });

            variables.registerAddButton(jQuery("#<%= _scope[:id_prefix] %>_add_users_and_roles"));
            variables.addDefaultRow();
            variables.registerFinishButton(finish_button);
        }

        var finish_button = jQuery(".finish");
        setupVarForm(finish_button);
        hookupPermissionsAutoComplete();
    });
</script>

</div>
<div class="roles">
    <label><%= l.string("ROLES") -%></label>
    <% _scope = {:stage => scope[:stage],
                                                                            :form => scope[:form],
                                                                            :collection => scope[:role_collection],
                                                                            :field_name => com.thoughtworks.cruise.config.StageConfig::OPERATE_ROLES,
                                                                            :id_prefix => "role",
                                                                            :autocomplete_suggestions => @autocomplete_roles}; -%><div class="form_content">
    <div class="user_permissions_section popup_form">
        <textarea id="<%= _scope[:id_prefix] %>_users_and_roles_template" class="template">
            <%- _scope[:form].fields_for _scope[:field_name], :index => "" do |permissions_form| -%>
                <td class="name_cell">
                    <%= permissions_form.text_field :name, :class => "form_input permissions_#{_scope[:id_prefix]}_name", :omit_id_generation => true -%>
                </td>
                <td class="name_cell">
                    <span class="icon_remove delete_parent"></span>
                </td>
            <%- end -%>
        </textarea>
        <table class="users_and_roles">
            <tbody class="<%= _scope[:id_prefix] %>_users_and_roles">
            <%- _scope[:collection].each do |permission| -%>
                <%- _scope[:form].fields_for _scope[:field_name], permission, :index => "" do |permissions_form| -%>
                    <tr>
                        <td class="name_cell">
                            <%= permissions_form.text_field :name, :class => "form_input permissions_#{_scope[:id_prefix]}_name", :omit_id_generation => true -%>
                            <%= error_message_on(permission, "name", :css_class => "name_value_error") %>
                        </td>
                        <td class="name_cell align_top">
                            <span class="icon_remove delete_parent"></span>
                        </td>
                    </tr>
                <%- end -%>
            <%- end -%>
            </tbody>
        </table>
        <!-- <a class="add_item skip_dirty_stop" id="<%= _scope[:id_prefix] %>_add_users_and_roles"><%= l.string("ADD") -%></a> -->

		<%= action_icon({:type => "add", :text => l.string("ADD") , :href => "javascript:void(0);", :id => _scope[:id_prefix]+"_add_users_and_roles", :class => "skip_dirty_stop" }) %>
    </div>
</div>
<script type="text/javascript">
    Util.on_load(function() {
        function hookupPermissionsAutoComplete() {
            jQuery(<%="\".permissions_#{_scope[:id_prefix]}_name\"" -%>).autocomplete(<%= _scope[:autocomplete_suggestions] -%>, {
                minChars: 0,
                width: 400,
                matchContains: "word",
                max: 50,
                autoFill: false});
        };
        
        function setupVarForm(finish_button) {
            var rowCreator = new EnvironmentVariables.RowCreator(jQuery('#<%= _scope[:id_prefix] %>_users_and_roles_template'), 'tr', '.delete_parent');
            var variables = new EnvironmentVariables(
                    jQuery('tbody.<%= _scope[:id_prefix] %>_users_and_roles'),
                    rowCreator,
                    null,
                    function(inputs) {
                        inputs.dirty_form();
                        hookupPermissionsAutoComplete();
                    },
                    function(row) {
                        row.parents("form.dirtyform").data("dirty", true);
                    });

            variables.registerAddButton(jQuery("#<%= _scope[:id_prefix] %>_add_users_and_roles"));
            variables.addDefaultRow();
            variables.registerFinishButton(finish_button);
        }

        var finish_button = jQuery(".finish");
        setupVarForm(finish_button);
        hookupPermissionsAutoComplete();
    });
</script>

</div>
                    <% else %>
                        <% scope = {:stage => @stage, :form => f, :user_collection => @stage.getOperateUsers(),
                                                                                               :role_collection => @stage.getOperateRoles()}; -%><div class="users">
    <label><%= l.string("USERS") -%></label>
    <% _scope = {:stage => scope[:stage],
                                                                            :form => scope[:form],
                                                                            :collection => scope[:user_collection],
                                                                            :field_name => com.thoughtworks.cruise.config.StageConfig::OPERATE_USERS,
                                                                            :id_prefix => "user",
                                                                            :autocomplete_suggestions => @autocomplete_users}; -%><div class="form_content">
    <div class="user_permissions_section popup_form">
        <textarea id="<%= _scope[:id_prefix] %>_users_and_roles_template" class="template">
            <%- _scope[:form].fields_for _scope[:field_name], :index => "" do |permissions_form| -%>
                <td class="name_cell">
                    <%= permissions_form.text_field :name, :class => "form_input permissions_#{_scope[:id_prefix]}_name", :omit_id_generation => true -%>
                </td>
                <td class="name_cell">
                    <span class="icon_remove delete_parent"></span>
                </td>
            <%- end -%>
        </textarea>
        <table class="users_and_roles">
            <tbody class="<%= _scope[:id_prefix] %>_users_and_roles">
            <%- _scope[:collection].each do |permission| -%>
                <%- _scope[:form].fields_for _scope[:field_name], permission, :index => "" do |permissions_form| -%>
                    <tr>
                        <td class="name_cell">
                            <%= permissions_form.text_field :name, :class => "form_input permissions_#{_scope[:id_prefix]}_name", :omit_id_generation => true -%>
                            <%= error_message_on(permission, "name", :css_class => "name_value_error") %>
                        </td>
                        <td class="name_cell align_top">
                            <span class="icon_remove delete_parent"></span>
                        </td>
                    </tr>
                <%- end -%>
            <%- end -%>
            </tbody>
        </table>
        <!-- <a class="add_item skip_dirty_stop" id="<%= _scope[:id_prefix] %>_add_users_and_roles"><%= l.string("ADD") -%></a> -->

		<%= action_icon({:type => "add", :text => l.string("ADD") , :href => "javascript:void(0);", :id => _scope[:id_prefix]+"_add_users_and_roles", :class => "skip_dirty_stop" }) %>
    </div>
</div>
<script type="text/javascript">
    Util.on_load(function() {
        function hookupPermissionsAutoComplete() {
            jQuery(<%="\".permissions_#{_scope[:id_prefix]}_name\"" -%>).autocomplete(<%= _scope[:autocomplete_suggestions] -%>, {
                minChars: 0,
                width: 400,
                matchContains: "word",
                max: 50,
                autoFill: false});
        };
        
        function setupVarForm(finish_button) {
            var rowCreator = new EnvironmentVariables.RowCreator(jQuery('#<%= _scope[:id_prefix] %>_users_and_roles_template'), 'tr', '.delete_parent');
            var variables = new EnvironmentVariables(
                    jQuery('tbody.<%= _scope[:id_prefix] %>_users_and_roles'),
                    rowCreator,
                    null,
                    function(inputs) {
                        inputs.dirty_form();
                        hookupPermissionsAutoComplete();
                    },
                    function(row) {
                        row.parents("form.dirtyform").data("dirty", true);
                    });

            variables.registerAddButton(jQuery("#<%= _scope[:id_prefix] %>_add_users_and_roles"));
            variables.addDefaultRow();
            variables.registerFinishButton(finish_button);
        }

        var finish_button = jQuery(".finish");
        setupVarForm(finish_button);
        hookupPermissionsAutoComplete();
    });
</script>

</div>
<div class="roles">
    <label><%= l.string("ROLES") -%></label>
    <% _scope = {:stage => scope[:stage],
                                                                            :form => scope[:form],
                                                                            :collection => scope[:role_collection],
                                                                            :field_name => com.thoughtworks.cruise.config.StageConfig::OPERATE_ROLES,
                                                                            :id_prefix => "role",
                                                                            :autocomplete_suggestions => @autocomplete_roles}; -%><div class="form_content">
    <div class="user_permissions_section popup_form">
        <textarea id="<%= _scope[:id_prefix] %>_users_and_roles_template" class="template">
            <%- _scope[:form].fields_for _scope[:field_name], :index => "" do |permissions_form| -%>
                <td class="name_cell">
                    <%= permissions_form.text_field :name, :class => "form_input permissions_#{_scope[:id_prefix]}_name", :omit_id_generation => true -%>
                </td>
                <td class="name_cell">
                    <span class="icon_remove delete_parent"></span>
                </td>
            <%- end -%>
        </textarea>
        <table class="users_and_roles">
            <tbody class="<%= _scope[:id_prefix] %>_users_and_roles">
            <%- _scope[:collection].each do |permission| -%>
                <%- _scope[:form].fields_for _scope[:field_name], permission, :index => "" do |permissions_form| -%>
                    <tr>
                        <td class="name_cell">
                            <%= permissions_form.text_field :name, :class => "form_input permissions_#{_scope[:id_prefix]}_name", :omit_id_generation => true -%>
                            <%= error_message_on(permission, "name", :css_class => "name_value_error") %>
                        </td>
                        <td class="name_cell align_top">
                            <span class="icon_remove delete_parent"></span>
                        </td>
                    </tr>
                <%- end -%>
            <%- end -%>
            </tbody>
        </table>
        <!-- <a class="add_item skip_dirty_stop" id="<%= _scope[:id_prefix] %>_add_users_and_roles"><%= l.string("ADD") -%></a> -->

		<%= action_icon({:type => "add", :text => l.string("ADD") , :href => "javascript:void(0);", :id => _scope[:id_prefix]+"_add_users_and_roles", :class => "skip_dirty_stop" }) %>
    </div>
</div>
<script type="text/javascript">
    Util.on_load(function() {
        function hookupPermissionsAutoComplete() {
            jQuery(<%="\".permissions_#{_scope[:id_prefix]}_name\"" -%>).autocomplete(<%= _scope[:autocomplete_suggestions] -%>, {
                minChars: 0,
                width: 400,
                matchContains: "word",
                max: 50,
                autoFill: false});
        };
        
        function setupVarForm(finish_button) {
            var rowCreator = new EnvironmentVariables.RowCreator(jQuery('#<%= _scope[:id_prefix] %>_users_and_roles_template'), 'tr', '.delete_parent');
            var variables = new EnvironmentVariables(
                    jQuery('tbody.<%= _scope[:id_prefix] %>_users_and_roles'),
                    rowCreator,
                    null,
                    function(inputs) {
                        inputs.dirty_form();
                        hookupPermissionsAutoComplete();
                    },
                    function(row) {
                        row.parents("form.dirtyform").data("dirty", true);
                    });

            variables.registerAddButton(jQuery("#<%= _scope[:id_prefix] %>_add_users_and_roles"));
            variables.addDefaultRow();
            variables.registerFinishButton(finish_button);
        }

        var finish_button = jQuery(".finish");
        setupVarForm(finish_button);
        hookupPermissionsAutoComplete();
    });
</script>

</div>
                    <% end %>
                </div>
            </div>
        </div>
        <% scope = {:reset_url => admin_stage_edit_path(:pipeline_name => @pipeline.name(), :stage_name => params[:stage_name], :current_tab => "permissions")}; -%><div class="form_buttons">
    <%= submit_button(l.string("SAVE"), :class => 'primary skip_dirty_stop') %>
    <%= link_to  l.string("RESET"), scope[:reset_url], :class => 'reset_button link_as_button skip_dirty_stop', :id => 'reset_form' -%>
</div>
    <% end %>

<script type="text/javascript">
    Util.on_load(function() {
        jQuery("#inherit_permissions").click(function() {
            var self = jQuery(this);
            jQuery("div.stage_permissions").addClass("hidden");
            jQuery("div.inherited_permissions").removeClass("hidden");
        });
        jQuery("#define_permissions").click(function() {
            var self = jQuery(this);
            jQuery("div.stage_permissions").removeClass("hidden");
            jQuery("div.inherited_permissions").addClass("hidden");
        });
    });
    AjaxForm.error_box_selector = '#form_parent';
</script>
