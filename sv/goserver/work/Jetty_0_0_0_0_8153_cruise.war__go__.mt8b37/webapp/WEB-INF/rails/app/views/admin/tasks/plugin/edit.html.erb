<% scope = { :task => @task, :tvm => @task_view_model, :url => admin_task_update_path, :method => "PUT" }; -%><%= render(:partial => "shared/flash_message") %>
<% if @config_file_conflict -%>
    <div id="config_save_actions" class="flash">
        <button id="reload_config" class="reload_config primary"><%=l.string("RELOAD")-%></button>
        <label class="inline"><%=l.string("REFRESH_CONFIG")%></label>
    </div>
    <script type="text/javascript">
        Util.on_load(function() {
           jQuery("#reload_config").click(function() {
               var location = "<%= request.referer -%>";
               if (location.endsWith("#")) {
                   location = location.substring(0, location.length - 1);
               }
               window.location.href = location;
           });
        });
    </script>
<% end -%>
<% form_for(:task, scope[:task], :url => scope[:url], :html => {:method => scope[:method], :onsubmit => "return AjaxForm.jquery_ajax_submit(this);", :class => "popup_form"}) do |f| %>
    <%= md5_field %>
    <div class="form_content exec_task_editor">
        <% _scope = {}; -%><% if @errors && !@errors.empty? %>
    <div class="form_submit_errors">
        <div class="errors">
            <h3><%= l.string("GLOBAL_ERRORS_MESSAGE") -%></h3>
            <ul>
                <% @errors.each do |error| %>
                    <li class="error"><%= h(error.to_s) -%></li>
                <% end %>
            </ul>
        </div>
    </div>
<% end %>
        <h3><%= l.string("BASIC_SETTINGS") %></h3>
        <div id="task">
            <div class="task fieldset">
                <%= render_pluggable_form_template(scope[:tvm], form_name_provider(f), { :scope => {:task => scope[:task], :form => f}}) -%>
                <% unless scope[:hide_runif] %>
                    <div class="form_item required">
                        <% _scope = {:form => f, :on_cancel => false, :run_if => true, :runif_container => random_dom_id('run_if_options_')}; -%><div class="form_item_block <%= _scope[:on_cancel] ? "on_cancel_" : "" -%>run_if_options" id="<%= _scope[:runif_container] = random_dom_id('run_if_options_') -%>">
    <%= label_tag  required_label_text(l.string("RUN_IFS")) %>

    <%= _scope[:form].check_box com.thoughtworks.cruise.config.AbstractTask::RUN_IF_CONFIGS_PASSED, {:class => "runif passed", :drop_hidden_field => true, :id => _scope[:run_if] = random_dom_id("runif_passed_")} %>
    <%= label_tag _scope[:run_if], h(l.string("PASSED")), :class => "condition" -%>

    <%= _scope[:form].check_box com.thoughtworks.cruise.config.AbstractTask::RUN_IF_CONFIGS_FAILED, {:class => "runif failed", :drop_hidden_field => true, :id => _scope[:run_if] = random_dom_id("runif_failed_")} %>
    <%= label_tag _scope[:run_if], h(l.string("FAILED")), :class => "condition" -%>

    <%= _scope[:form].check_box com.thoughtworks.cruise.config.AbstractTask::RUN_IF_CONFIGS_ANY, {:class => "runif any", :drop_hidden_field => true, :id => _scope[:run_if] = random_dom_id("runif_any_")} %>
    <%= label_tag _scope[:run_if], h(l.string("ANY")), :class => "condition" -%>

    <script type="text/javascript">
        Util.on_load(function() {
            new TaskEditor.RunIfEditor(jQuery("#<%= _scope[:runif_container] -%>"));
        });
    </script>
</div>
                    </div>
                <% end %>
                <% _scope = {}; -%><p class="required">
	<span class="asterisk"><%= l.string("REQUIRED_FIELD")%></span><%= l.string("REQUIRED_FIELD_MESSAGE")-%>
</p>
            </div>
            <h3><%= l.string("TASK_ADVANCED_OPTIONS") %></h3>
            <% _scope = {:task => @task, :form => f}; -%><div class="on_cancel fieldset">
    <%= _scope[:form].check_box(com.thoughtworks.cruise.config.AbstractTask::HAS_CANCEL_TASK, :class => "has_cancel_task", :id => "has_cancel_task") -%>
    <%= label_tag :has_cancel_task, l.string("ON_CANCEL_TASK"), :class => "inline" -%>
    <div class="on_cancel_task <%= _scope[:task].hasCancelTask() ? '' : 'hidden' %>">
        <% _scope[:form].fields_for com.thoughtworks.cruise.config.AbstractTask::ON_CANCEL_CONFIG, _scope[:task].onCancelConfig do |on_cancel_config| %>
            <%= on_cancel_config.select(com.thoughtworks.cruise.config.OnCancelConfig::ON_CANCEL_OPTIONS, task_options, {:selected => selected_option(_scope[:task].onCancelConfig())}, {:class => "on_cancel_type", :id => "on_cancel_task_options"}) %>
            <% tasks = com.thoughtworks.cruise.config.Tasks.new() %>
            <% @on_cancel_task_vms.each do |oncancel_task_vm|
                oncancel_task = oncancel_task_vm.getModel()
                task_class_name = oncancel_task.java_class.simple_name
                next if task_class_name == "FetchTask"
            %>
                <div class="hidden task_entry <%= task_class_name -%>">
                    <% on_cancel_config.fields_for oncancel_task.getTaskSimpleName() + "OnCancel", oncancel_task do |task_form| %>
                        <%= render_pluggable_form_template(oncancel_task_vm, form_name_provider(task_form), {:scope => {:form => task_form, :task => oncancel_task}}) -%>
                    <% end %>
                </div>
            <% end %>
        <% end %>
    </div>
</div>

<script type="text/javascript">
    Util.on_load(function() {
        var helper = new TaskEditor.TypeEditor({container: jQuery('.on_cancel_task'), switch_control: jQuery('.on_cancel_type'), entry_to_be_hidden: '.task_entry'});
        helper.showHideCheckbox(jQuery('.has_cancel_task'));//memory leak
    });
</script>
        </div>
    </div>
    <% _scope = {:submit_label => l.string("SAVE")}; -%><div class="form_buttons actions">
    <%= submit_button(_scope[:submit_label], :class => 'primary finish') %>
    <button class="left submit close_modalbox_control"><span><%= l.string('CANCEL') -%></span></button>
</div>
    <script type="text/javascript">
    Util.on_load(function() {
        jQuery(".has_go_tip").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10});
        jQuery(".has_go_tip_right").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "right"});
        jQuery(".has_go_tip_left").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "left" });
        jQuery(".has_go_tip_top").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "top" });
    });
</script>
<% end %>
