<div id="new_template_container">
    <%= render(:partial => "shared/flash_message") %>
    <% scope = {}; -%><% if @config_file_conflict -%>
    <div id="config_save_actions" class="flash">
        <button id="reload_config" class="reload_config primary"><%=l.string("RELOAD")-%></button>
        <label class="inline"><%=l.string("REFRESH_CONFIG")%></label>
    </div>
    <script type="text/javascript">
        Util.on_load(function() {
           jQuery("#reload_config").click(function() {
               var location = "<%= request.referer -%>";
               if (location.endsWith("#")) {
                   location = location.substring(0, location.length - 1);
               }
               window.location.href = location;
           });
        });
    </script>
<% end -%>
    <% form_for(:pipeline, @pipeline,
                :url => template_create_path,
                :html => {:method => "POST", :onsubmit => "return AjaxForm.jquery_ajax_submit(this);", :class => "popup_form"}) do |f| %>
        <%= md5_field %>
        <div class="form_content">
            <% scope = {}; -%><% if @errors && !@errors.empty? %>
    <div class="form_submit_errors">
        <div class="errors">
            <h3><%= l.string("GLOBAL_ERRORS_MESSAGE") -%></h3>
            <ul>
                <% @errors.each do |error| %>
                    <li class="error"><%= h(error.to_s) -%></li>
                <% end %>
            </ul>
        </div>
    </div>
<% end %>
            <h3><%= l.string("GENERAL_OPTIONS") -%></h3>

            <div class="instructions">
                <%= l.string("INSTRUCTION_ADD_TEMPLATE") -%>
            </div>
            <div class="fieldset required">
                <div class="form_item_block">
                    <% f.fields_for com.thoughtworks.cruise.presentation.PipelineTemplateConfigViewModel::TEMPLATE, @pipeline.templateConfig() do |t| %>
                        <%= required_label(t, com.thoughtworks.cruise.config.PipelineTemplateConfig::NAME, l.string("TEMPLATE_NAME")) -%>
                        <%= t.text_field com.thoughtworks.cruise.config.PipelineTemplateConfig::NAME %>
                        <%= error_message_on(@pipeline.templateConfig(), com.thoughtworks.cruise.config.PipelineTemplateConfig::NAME, :css_class => "form_error") %>
                    <% end %>
                </div>
                <div class="form_item_block">
                    <%- extract_from = @pipeline.selectedPipelineName() -%>
                    <div class="checkbox_row">
                        <% pipelineEmptyOrPegged = @pipeline.pipelineNames.empty? || ( extract_from && !allow_pipeline_selection?)
                           check_box_options = { :class => "pipeline_to_extract_selector" }
                           check_box_label_options = {}
                           if pipelineEmptyOrPegged
                             check_box_options[:disabled] = "disabled"
                             check_box_label_options[:class] = "disabled" 
                           end
                           check_box_options[:checked] = "checked" if extract_from
                          %>

                        <%= f.check_box com.thoughtworks.cruise.presentation.PipelineTemplateConfigViewModel::USE_EXISTING_PIPELINE, check_box_options %>

                        <%= f.label com.thoughtworks.cruise.presentation.PipelineTemplateConfigViewModel::USE_EXISTING_PIPELINE, l.string("EXTRACT_TEMPLATE_FROM_PIPELINE_LABEL"), check_box_label_options %>
                        <% extract_pipeline_tool_tip= @pipeline.pipelineNames.empty? ? "CREATE_TEMPLATE_FROM_PIPELINE_DISABLED_TOOL_TIP" : "CREATE_TEMPLATE_FROM_PIPELINE_TOOL_TIP" %>
                        <div class="contextual_help has_go_tip_right" title="<%=l.string(extract_pipeline_tool_tip)-%>"></div>
                    </div>
                    <% if !allow_pipeline_selection? %>
                        <div id="pipelines_to_extract_from">
                            <div class="form_item_block">
                                <%= f.select(com.thoughtworks.cruise.presentation.PipelineTemplateConfigViewModel::PIPELINE_NAMES, @pipeline.pipelineNames, {:selected => extract_from}, {:disabled => "disabled"}) %>
                                <%= f.hidden_field(com.thoughtworks.cruise.presentation.PipelineTemplateConfigViewModel::SELECTED_PIPELINE_NAME) %>
                            </div>
                            <div><%= l.string("THIS_PIPELINE_WILL_NOW_START_USING_NEWLY_CREATED_TEMPLATE") -%></div>
                        </div>
                    <% else %>
                        <div id="pipelines_to_extract_from" class='<%= @pipeline.useExistingPipeline ? "" :"hidden" %>'>
                            <div class="form_item_block">
                                <%= f.select(com.thoughtworks.cruise.presentation.PipelineTemplateConfigViewModel::SELECTED_PIPELINE_NAME, @pipeline.pipelineNames, {:selected => @pipeline.selectedPipelineName()}) %>
                            </div>
                            <div><%= l.string("THIS_PIPELINE_WILL_NOW_START_USING_NEWLY_CREATED_TEMPLATE") -%></div>
                        </div>
                    <% end %>
                </div>
            </div>
			<p class="required">
	<span class="asterisk"><%= l.string("REQUIRED_FIELD")%></span><%= l.string("REQUIRED_FIELD_MESSAGE")-%>
</p>
        </div>
        <% scope = {:submit_label => "SAVE"}; -%><div class="form_buttons actions">
    <%= submit_button(scope[:submit_label], :class => 'primary finish') %>
    <button class="left submit close_modalbox_control"><span><%= l.string('CANCEL') -%></span></button>
</div>
        <% scope = {}; -%><script type="text/javascript">
    Util.on_load(function() {
        jQuery(".has_go_tip").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10});
        jQuery(".has_go_tip_right").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "right"});
        jQuery(".has_go_tip_left").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "left" });
        jQuery(".has_go_tip_top").tipTip({activation: "click", maxWidth: "auto", edgeOffset: 10, defaultPosition: "top" });
    });
</script>
    <% end %>
</div>
<script type="text/javascript">
    function isChecked(checkbox) {
        return checkbox.is(':checked');
    }

    function hide() {
        jQuery("#pipelines_to_extract_from").addClass("hidden");
    }

    function show() {
        jQuery("#pipelines_to_extract_from").removeClass("hidden");
    }

    Util.on_load(function() {
        var checkbox = jQuery(".pipeline_to_extract_selector");
        checkbox.click(function() {
            if (isChecked(checkbox)) {
                show();
            } else {
                hide();
            }
        });
    });
</script>