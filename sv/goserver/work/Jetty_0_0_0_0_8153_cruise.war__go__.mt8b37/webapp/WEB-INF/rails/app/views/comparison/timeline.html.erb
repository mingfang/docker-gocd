<div id="modal_timeline_container">
    <% scope = {:pipeline_instances => @pipeline_instances, :suffix => params[:suffix]}; -%><div class="modal_timeline">
    <form>
        <div class="results">
            <div class="pipeline_instance_list">
                <ul>
                    <% scope[:pipeline_instances].each_with_index do |pim, i| %>
                        <li id="pim_list_<%= i -%>" class="pim_list clear_float">
                            <%
                               pipeline_label_class = pim.getLabel().length > 18 ? "pipeline_label_truncated" : "pipeline_label"
                            %>
                            <div class="<%= pipeline_label_class %>" title="<%= pim.getLabel() -%>">
                                <%= truncate(pim.getLabel(), :length => 18) -%>
                            </div>
                            <div class="pipeline">
                                <div class="stages clear_float">
                                    <% pim.getStageHistory().each do |sim_for_pipeline| %>
                                        <div style='width: <%= stage_width_em(pim.numberOfStages(), false, 10.9) %>' class="stage inline">
                                            <div class="stage_bar_wrapper">
                                                <div <%= stage_bar_options(sim_for_pipeline) -%>><%= check_for_cancelled_contents(sim_for_pipeline.getState()) %></div>
                                            </div>
                                        </div>
                                    <% end %>
                                </div>
                            </div>
                        </li>
                    <% end %>
                </ul>
                <div id="pagination_bar">
                    <% _scope = {:page_handler => :compare_pipeline_pagination_handler,
                                                      :pagination => scope[:pipeline_instances].getPagination(),
                                                      :handler_args => [scope[:suffix]]}; -%><%- _scope[:handler_args] = Array(_scope[:handler_args]) -%>
<% if _scope[:pagination].getTotalPages() > 0 %>
    <div class="pagination">
        <div class="wrapper">
            <% _scope[:pagination].getPages().each do |page| %>
                <% if page.isDots() %>
                    <span>...</span>
                <% else %>
                    <% if page.isCurrent() %>
                        <span class="current_page"><%= page.getLabel() %></span>
                    <% else %>
                        <%= send(_scope[:page_handler], page, *_scope[:handler_args]) -%>
                    <% end %>
                <% end %>
            <% end %>
        </div>
    </div>
<% end %>
                </div>
            </div>
            <div class="pipeline_instance_details">
                <% scope[:pipeline_instances].each_with_index do |pim, i| %>
                    <div id="pim_details_<%= i %>" class="hidden pim_details">
                        <% if scope[:suffix] == "from"
                               compare_href = compare_pipelines_path(:pipeline_name => pim.getName(), :from_counter => pim.getCounter, :to_counter => params[:other_pipeline_counter].to_i)
                           else
                               compare_href = compare_pipelines_path(:pipeline_name => pim.getName(), :from_counter => params[:other_pipeline_counter].to_i, :to_counter => pim.getCounter())
                           end
                        -%>
                        <input type="hidden" class="pipeline_counter" value="<%= compare_href %>">
                        <% _scope = {:pipeline => pim, :disable_stage_bar_href => true}; -%><div class="pipeline">
    <div class="stages autocomplete">
        <div class="pipeline_counter">
            <h3><%= highlight(word_breaker(_scope[:pipeline].getLabel().to_s), params[:q]) -%></h3>
        </div>
        <div class="pipeline_details">
            <div class="stage_graphic clear_float">
                <% __scope = {:pipeline => _scope[:pipeline], :disable_stage_bar_href => _scope[:disable_stage_bar_href]}; -%><% __scope[:pipeline].getStageHistory().each do |sim_for_pipeline|
    __scope[:html_options] = stage_bar_options(sim_for_pipeline) %>
    <div style='width: <%= stage_width_percent(__scope[:pipeline].numberOfStages(), false, 97) %>' class="stage">
        <div class="stage_bar_wrapper">
            <% if placeholder_stage?(sim_for_pipeline) %>
                <div <%= __scope[:html_options] -%>><%= check_for_cancelled_contents(sim_for_pipeline.getState()) %></div>
            <% else %>
                <a href="<%= __scope[:disable_stage_bar_href] ? '#' : stage_detail_path(:pipeline_name => __scope[:pipeline].getName(), :pipeline_counter => __scope[:pipeline].getCounter(), :stage_name => sim_for_pipeline.getName(), :stage_counter => sim_for_pipeline.getCounter()) -%>">
                    <div <%= __scope[:html_options] -%>>
                        <%= check_for_cancelled_contents(sim_for_pipeline.getState()) %>
                    </div>
                </a>
            <% end %>
        </div>
    </div>
<% end %>
<div class="triggered_by">
    <%= "#{trigger_message_with_formatted_date_time(__scope[:pipeline].getScheduledDate(), __scope[:pipeline].getApprovedBy())}" -%>
</div>
            </div>
            <table class="change">
                <% _scope[:pipeline].getBuildCause().getMaterialRevisions().each do |materialRevision| %>
                    <% materialRevision.getModifications().each do |modification| %>
                        <% _scope[:revision] = modification.getRevision()
                           if materialRevision.isDependencyMaterialRevision()
                             _scope[:upstream_label] = materialRevision.getLatestModification().getPipelineLabel()
                           else
                             _scope[:comment] = modification.getComment()
                             _scope[:modified_by] = modification.getUserDisplayName()
                           end
                           if any_match?(params[:q], _scope[:revision], _scope[:upstream_label], _scope[:comment], _scope[:modified_by])
                        %>
                            <tr class="first">
                                <td class="label">Revision:</td>
                                <td><%= highlight(_scope[:revision], params[:q]) %></td>
                            </tr>
                            <% if materialRevision.isDependencyMaterialRevision() %>
                                <tr>
                                    <td class="label">Comment:</td>
                                    <td><%= highlight(_scope[:upstream_label], params[:q]) %></td>
                                </tr>
                            <% else %>
                                <tr>
                                    <td class="label">Comment:</td>
                                    <td class="comment"><%= highlight(render_comment(modification, _scope[:pipeline].getName()), params[:q]) %></td>
                                </tr>
                                <tr>
                                    <td class="label">Modified&nbsp;by:</td>
                                    <td><%= highlight(_scope[:modified_by], params[:q]) %> on <%= modification.getModifiedTime().to_long_display_date_time %></td>
                                </tr>
                            <% end %>
                            <tr>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                            </tr>
                        <% end %>
                    <% end %>
                <% end %>
            </table>
        </div>
    </div>
</div>

                    </div>
                <% end %>
            </div>
            <div class="form_buttons actions">
                <a href="javascript:void(0);" class="link_as_button primary_link_as_button" id="timeline_select_button" tabindex="1"><%= l.string("SELECT_THIS_PIPELINE") %></a>
                <a href="javascript:void(0);" class="link_as_button" id="timeline_cancel_button"><%= l.string("CANCEL") %></a>
            </div>
        </div>
    </form>
    <script type="text/javascript">
        Util.on_load(function() {
            jQuery(".pim_list").each(function(i) {
                jQuery(this).dblclick(function(event) {
                    comparePipelines();
                })
                jQuery(this).click(function(event) {
                    jQuery(".pim_details:visible").hide();
                    jQuery(".pim_list.selected").removeClass("selected");

                    jQuery("#pim_list_" + i).addClass("selected");
                    jQuery("#pim_details_" + i).show();
                });
            });

            jQuery(".pim_list:first").addClass("selected").click();

            jQuery("#timeline_cancel_button").click(function() {
                Modalbox.hide();
            });

            jQuery("#timeline_select_button").click(function() {
                comparePipelines();
            });

            function comparePipelines() {
                var url = jQuery(".pim_details:visible").find("input.pipeline_counter").val();
                window.location.href = url;
                Modalbox.hide();
            }
        });
    </script>
</div>
</div>