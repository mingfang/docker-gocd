<% @view_title = l.string("Stage Detail") -%>

<% @show_stage_status_bar = true -%>
<div class="sub_tabs_container">
    <ul>
        <%= link_with_current_tab l.string("OVERVIEW"), "overview" %>
        <%= link_with_current_tab l.string("PIPELINE_DEPENDENCIES"), "pipeline" %>
        <%= link_with_current_tab l.string("MATERIALS"), "materials" %>
        <%= link_with_current_tab l.string("JOBS"), "jobs" %>
        <%= link_with_current_tab l.string("TESTS"), "tests" %>
        <%= link_with_current_tab l.string("CONFIG"), "config" %>
        <%= link_with_current_tab l.string("GRAPHS"), "stats" %>
    </ul>
</div>

<div id="tab_container">
    <% case params[:action]
        when 'overview' %>
        <div class="jobs overview_widget" id="jobs">
    <h3><%= l.string("JOBS_CAPS") %></h3>

    <div id="jobs_failed" class="job_grouping jobs_failed <%= "hidereveal_collapsed" unless @stage.nonPassedJobs().size() > 0 %>">
        <% _scope = {:message => "FAILED_JOBS", :jobs => @stage.nonPassedJobs(), :parent_id=>"jobs_failed"}; -%><span class="hidereveal_expander"><%= l.string(_scope[:message], [_scope[:jobs].size()]) %></span>
<% if _scope[:jobs].size()>0 %>
    <ul class="hidereveal_content">
        <% _scope[:jobs].each do |job_in_job_breakdown| %>
            <li class="job">
                <a class="" href="<%= url_for_job(job_in_job_breakdown) %>">
                    <div class="color_code_small <%= job_in_job_breakdown.getStatus() -%>">
                        <%= check_for_cancelled_contents(job_in_job_breakdown.getStatus()) %>
                    </div>
                    <%= smart_word_breaker(job_in_job_breakdown.getName()) %>
                </a>
                <% unless job_in_job_breakdown.isCompleted() %>
                    <% __scope = {:job => job_in_job_breakdown }; -%><%
   __scope[:show_elapsed] = __scope[:show_elapsed].nil? ? true : __scope[:show_elapsed]
   __scope[:elapsed_time] = l.localizeDuration(__scope[:job].getElapsedTime())
   __scope[:has_elapsed_time] = !__scope[:elapsed_time].empty?
   if __scope[:job].isCompleted() or (__scope[:job].getPercentComplete() == 0 or __scope[:job].getPercentComplete() == 100) %>
    <div class="elapsed_time">
        <% if __scope[:has_elapsed_time] %>
            <% if __scope[:show_elapsed] %>
                <br/>
                <%= "#{l.string('Elapsed')}: " %>
            <% end %>
            <%= __scope[:elapsed_time] %>
        <% end %>
    </div>
<% else %>
    <div class="progress_bar_container" title="<%= __scope[:elapsed_time] %> (<%= __scope[:job].getPercentComplete() %>%)">
        <div class="progress_bar" style="width: <%= __scope[:job].getPercentComplete()%>%;"></div>
    </div>
<% end %>
 
                <% end %>
            </li>
        <% end %>
    </ul>
    <script type='text/javascript'>
        Util.on_load(new function() {
            AjaxRefreshers.main().afterRefreshOf('<%= _scope[:parent_id] %>', (function() {
                make_collapsable('<%= _scope[:parent_id] %>');
            }));
        });
    </script>
<% end %>

    </div>  
    <div id="jobs_in_progress" class="job_grouping jobs_in_progress <%= "hidereveal_collapsed" unless @stage.inProgressJobs().size() > 0 %>">
        <% _scope = {:message => "IN_PROGRESS_JOBS", :jobs => @stage.inProgressJobs(), :parent_id=>"jobs_in_progress"}; -%><span class="hidereveal_expander"><%= l.string(_scope[:message], [_scope[:jobs].size()]) %></span>
<% if _scope[:jobs].size()>0 %>
    <ul class="hidereveal_content">
        <% _scope[:jobs].each do |job_in_job_breakdown| %>
            <li class="job">
                <a class="" href="<%= url_for_job(job_in_job_breakdown) %>">
                    <div class="color_code_small <%= job_in_job_breakdown.getStatus() -%>">
                        <%= check_for_cancelled_contents(job_in_job_breakdown.getStatus()) %>
                    </div>
                    <%= smart_word_breaker(job_in_job_breakdown.getName()) %>
                </a>
                <% unless job_in_job_breakdown.isCompleted() %>
                    <% __scope = {:job => job_in_job_breakdown }; -%><%
   __scope[:show_elapsed] = __scope[:show_elapsed].nil? ? true : __scope[:show_elapsed]
   __scope[:elapsed_time] = l.localizeDuration(__scope[:job].getElapsedTime())
   __scope[:has_elapsed_time] = !__scope[:elapsed_time].empty?
   if __scope[:job].isCompleted() or (__scope[:job].getPercentComplete() == 0 or __scope[:job].getPercentComplete() == 100) %>
    <div class="elapsed_time">
        <% if __scope[:has_elapsed_time] %>
            <% if __scope[:show_elapsed] %>
                <br/>
                <%= "#{l.string('Elapsed')}: " %>
            <% end %>
            <%= __scope[:elapsed_time] %>
        <% end %>
    </div>
<% else %>
    <div class="progress_bar_container" title="<%= __scope[:elapsed_time] %> (<%= __scope[:job].getPercentComplete() %>%)">
        <div class="progress_bar" style="width: <%= __scope[:job].getPercentComplete()%>%;"></div>
    </div>
<% end %>
 
                <% end %>
            </li>
        <% end %>
    </ul>
    <script type='text/javascript'>
        Util.on_load(new function() {
            AjaxRefreshers.main().afterRefreshOf('<%= _scope[:parent_id] %>', (function() {
                make_collapsable('<%= _scope[:parent_id] %>');
            }));
        });
    </script>
<% end %>

    </div>
    <div id="jobs_passed" class="job_grouping jobs_passed <%= "hidereveal_collapsed" unless (@stage.nonPassedJobs().size()==0 && @stage.inProgressJobs().size()==0) %>">
        <% _scope = {:message => "PASSED_JOBS", :jobs => @stage.passedJobs(), :parent_id=>"jobs_passed"}; -%><span class="hidereveal_expander"><%= l.string(_scope[:message], [_scope[:jobs].size()]) %></span>
<% if _scope[:jobs].size()>0 %>
    <ul class="hidereveal_content">
        <% _scope[:jobs].each do |job_in_job_breakdown| %>
            <li class="job">
                <a class="" href="<%= url_for_job(job_in_job_breakdown) %>">
                    <div class="color_code_small <%= job_in_job_breakdown.getStatus() -%>">
                        <%= check_for_cancelled_contents(job_in_job_breakdown.getStatus()) %>
                    </div>
                    <%= smart_word_breaker(job_in_job_breakdown.getName()) %>
                </a>
                <% unless job_in_job_breakdown.isCompleted() %>
                    <% __scope = {:job => job_in_job_breakdown }; -%><%
   __scope[:show_elapsed] = __scope[:show_elapsed].nil? ? true : __scope[:show_elapsed]
   __scope[:elapsed_time] = l.localizeDuration(__scope[:job].getElapsedTime())
   __scope[:has_elapsed_time] = !__scope[:elapsed_time].empty?
   if __scope[:job].isCompleted() or (__scope[:job].getPercentComplete() == 0 or __scope[:job].getPercentComplete() == 100) %>
    <div class="elapsed_time">
        <% if __scope[:has_elapsed_time] %>
            <% if __scope[:show_elapsed] %>
                <br/>
                <%= "#{l.string('Elapsed')}: " %>
            <% end %>
            <%= __scope[:elapsed_time] %>
        <% end %>
    </div>
<% else %>
    <div class="progress_bar_container" title="<%= __scope[:elapsed_time] %> (<%= __scope[:job].getPercentComplete() %>%)">
        <div class="progress_bar" style="width: <%= __scope[:job].getPercentComplete()%>%;"></div>
    </div>
<% end %>
 
                <% end %>
            </li>
        <% end %>
    </ul>
    <script type='text/javascript'>
        Util.on_load(new function() {
            AjaxRefreshers.main().afterRefreshOf('<%= _scope[:parent_id] %>', (function() {
                make_collapsable('<%= _scope[:parent_id] %>');
            }));
        });
    </script>
<% end %>

    </div>
</div>

<div class="materials_overview_wrapper">
    <% _scope = {:overview => true, :material_revisions => @pipeline.getCurrentRevisions(), :show_files => false, :pipeline_name => @pipeline.getName(), :show_latest_only => true}; -%><%_scope[:show_latest_only] = _scope[:show_latest_only] || false%>
<div class="build_cause">
    <% if @stage.getStage().shouldFetchMaterials() %>
      <% _scope[:material_revisions].getRevisions().each do |material_revision_in_build_cause|
        _scope[:material] = material_revision_in_build_cause.getMaterial() %>
        <div id="material_<%= material_revision_in_build_cause.getMaterial().getPipelineUniqueFingerprint() -%>" class="material<%= material_revision_in_build_cause.isChanged() ? ' changed' : ""  -%>">
            <div class="material_name"><%= "#{_scope[:material].getTypeForDisplay()}" %> - <%= "#{_scope[:material].getDisplayName()}" -%></div>
            <% if !dependency_material?(_scope[:material]) %>
                <%if _scope[:show_latest_only]%>
                    <% __scope = {:modification => material_revision_in_build_cause.getLatestModification(), :pipeline_name => _scope[:pipeline_name], :show_files => _scope[:show_files]}; -%><div class="change">
    <div class="revision">
        <dl>
            <dt><%= l.string('REVISION:') -%></dt>
            <dd><%= __scope[:modification].getRevision() -%></dd>
        </dl>
    </div>
    <div class="modified_by">
        <dl>
            <dt><%= l.string('MODIFIED_BY:') -%></dt>
            <dd><%= h(l.modified_by(__scope[:modification].getUserDisplayName(), __scope[:modification].getModifiedTime().iso8601)) -%></dd>
        </dl>
    </div>
    <div class="comment">
        <dl>
            <dt><%= l.string('COMMENT:') -%></dt>
            <dd>
                <div class='container'>
                    <%= render_comment(__scope[:modification], __scope[:pipeline_name]) -%>
                </div>

            </dd>
        </dl>
    </div>
    <% if __scope[:show_files] -%>
        <div class="modified_files">
            <% __scope[:modification].getModifiedFiles().each do |file_in_mod| %>
                <div class="<%= file_in_mod.getAction() -%>"><%= file_in_mod.getFileName() -%></div>
            <% end %>
        </div>
    <% end -%>
</div>
                <%else%>
                    <% material_revision_in_build_cause.getModifications().each do |mod_in_build_cause| %>
                        <% __scope = {:modification => mod_in_build_cause, :pipeline_name => _scope[:pipeline_name], :show_files => _scope[:show_files]}; -%><div class="change">
    <div class="revision">
        <dl>
            <dt><%= l.string('REVISION:') -%></dt>
            <dd><%= __scope[:modification].getRevision() -%></dd>
        </dl>
    </div>
    <div class="modified_by">
        <dl>
            <dt><%= l.string('MODIFIED_BY:') -%></dt>
            <dd><%= h(l.modified_by(__scope[:modification].getUserDisplayName(), __scope[:modification].getModifiedTime().iso8601)) -%></dd>
        </dl>
    </div>
    <div class="comment">
        <dl>
            <dt><%= l.string('COMMENT:') -%></dt>
            <dd>
                <div class='container'>
                    <%= render_comment(__scope[:modification], __scope[:pipeline_name]) -%>
                </div>

            </dd>
        </dl>
    </div>
    <% if __scope[:show_files] -%>
        <div class="modified_files">
            <% __scope[:modification].getModifiedFiles().each do |file_in_mod| %>
                <div class="<%= file_in_mod.getAction() -%>"><%= file_in_mod.getFileName() -%></div>
            <% end %>
        </div>
    <% end -%>
</div>
                    <% end %>
                <%end%>

            <% else %>
                <div class="change">
                    <% _scope[:dmr] = material_revision_in_build_cause.getRevision() %>
                    <div class="revision">
                        <dl>
                            <dt><%= l.string('REVISION:') -%></dt>
                            <dd><%= link_to(_scope[:dmr].getRevision(), path_for_stage(_scope[:dmr]))-%></dd>
                        </dl>
                    </div>
                    <div class="label">
                        <dl>
                            <dt><%= l.string('LABEL:') -%></dt>
                            <dd><%= link_to(_scope[:dmr].getPipelineLabel(), url_for_dmr(_scope[:dmr])) -%></dd>
                        </dl>
                    </div>
                    <div class="completed_at">
                        <dl>
                            <dt><%= l.string('COMPLETED AT:') -%></dt>
                            <dd><%= material_revision_in_build_cause.getLatestModification().getModifiedTime().iso8601 -%></dd>
                        </dl>
                    </div>
                </div>
            <% end %>
        </div>
      <% end %>
    <% else %>
    <div class="information">
        <p>No materials were fetched for this stage because the <a href="/go/help/configuration_reference.html#stage" target="_blank">fetchMaterials</a> flag was set to false</p>
    </div>
    <% end %>
</div>

</div>
    <% when 'jobs' %>
        <div id="jobs_grid">
            <% scope = {:jobs => @jobs, :stage => @stage, :has_operate_permissions => @has_operate_permissions }; -%><%- stage_state = scope[:stage].getState()
    if stage_state.completed() -%>
    <%= form_tag rerun_jobs_path(:tab => params[:action]) %>
<%- end -%>

<div id="job_actions">
<%- if scope[:has_operate_permissions] && scope[:stage].getState().completed() -%>
        <%= submit_button(l.string("RERUN")) %>
    <% end %>
</div>

<table class="jobs_summary list_table <%= scope[:stage].getStage().hasRerunJobs() ? "stage_with_rerun_jobs" : "" -%>">
    <tr>
        <th>&nbsp;</th>
        <th>Name</th>
        <th>Result</th>
        <th>State</th>
        <th>Duration</th>
        <th>Agent</th>
    </tr>

    <% _scope = {:jobs => scope[:jobs], :stage_state => stage_state, :has_operate_permissions => scope[:has_operate_permissions]}; -%><% _scope[:jobs].each do |job| %>
    <tr class="job <%= job.isRerun() ? "is_rerun" : "not_rerun" -%>">
        <td class="selector">
            <% if _scope[:has_operate_permissions] && _scope[:stage_state].completed() %>
                <%= check_box_tag("jobs[]", job.getName(), false, :class => "job_selector") -%>
            <% end %>
        </td>
        <td class="job_name">
            <a href="<%= url_for_job(job) %>">
                <%= smart_word_breaker(job.getName()) -%></a>
        </td>
        <td class="job_result">
            <div class="color_code_small <%= l.string(job.getStatus()) -%>">
                <%= check_for_cancelled_contents(job.getStatus()) %>
            </div>
            <%- if job.isRerun() -%>
                <img class="rerun_job_icon" src="<%=image_path('/images/g9/icons/icon_rerun_flag.png')%>">
            <%- end -%>
            <%= l.string(job.getStatus()) -%>
        </td>
        <td class="job_state"><%= l.messageFor(job.getState()) -%></td>
        <td class="duration">
            <% __scope = {:job => job , :show_elapsed => false}; -%><%
   __scope[:show_elapsed] = __scope[:show_elapsed].nil? ? true : __scope[:show_elapsed]
   __scope[:elapsed_time] = l.localizeDuration(__scope[:job].getElapsedTime())
   __scope[:has_elapsed_time] = !__scope[:elapsed_time].empty?
   if __scope[:job].isCompleted() or (__scope[:job].getPercentComplete() == 0 or __scope[:job].getPercentComplete() == 100) %>
    <div class="elapsed_time">
        <% if __scope[:has_elapsed_time] %>
            <% if __scope[:show_elapsed] %>
                <br/>
                <%= "#{l.string('Elapsed')}: " %>
            <% end %>
            <%= __scope[:elapsed_time] %>
        <% end %>
    </div>
<% else %>
    <div class="progress_bar_container" title="<%= __scope[:elapsed_time] %> (<%= __scope[:job].getPercentComplete() %>%)">
        <div class="progress_bar" style="width: <%= __scope[:job].getPercentComplete()%>%;"></div>
    </div>
<% end %>
 
        </td>
        <td class="agent"
            <%- if job.hasAgentInfo() -%>
                title="<%=job.getAgentLocation()-%>">
                <% agent_that_job_ran_on = "#{smart_word_breaker(job.getHostname())}(#{job.getIpAddress()})" %>
                <%=link_to(agent_that_job_ran_on, agent_detail_path(:uuid => job.getUuid())) %>
            <%- else -%>>
                <%=l.string('Not yet assigned')%>
            <%- end -%>
        </td>
    </tr>
<% end %>
</table>
<%- if scope[:stage].getState().completed() -%>
    </form>
<%- end -%>
        </div>
    <% when 'materials' %>
        <div class="material_tab">
            <% scope = {:overview => false, :material_revisions => @pipeline.getCurrentRevisions(), :show_files => true, :pipeline_name => @pipeline.getName()}; -%><%scope[:show_latest_only] = scope[:show_latest_only] || false%>
<div class="build_cause">
    <% if @stage.getStage().shouldFetchMaterials() %>
      <% scope[:material_revisions].getRevisions().each do |material_revision_in_build_cause|
        scope[:material] = material_revision_in_build_cause.getMaterial() %>
        <div id="material_<%= material_revision_in_build_cause.getMaterial().getPipelineUniqueFingerprint() -%>" class="material<%= material_revision_in_build_cause.isChanged() ? ' changed' : ""  -%>">
            <div class="material_name"><%= "#{scope[:material].getTypeForDisplay()}" %> - <%= "#{scope[:material].getDisplayName()}" -%></div>
            <% if !dependency_material?(scope[:material]) %>
                <%if scope[:show_latest_only]%>
                    <% _scope = {:modification => material_revision_in_build_cause.getLatestModification(), :pipeline_name => scope[:pipeline_name], :show_files => scope[:show_files]}; -%><div class="change">
    <div class="revision">
        <dl>
            <dt><%= l.string('REVISION:') -%></dt>
            <dd><%= _scope[:modification].getRevision() -%></dd>
        </dl>
    </div>
    <div class="modified_by">
        <dl>
            <dt><%= l.string('MODIFIED_BY:') -%></dt>
            <dd><%= h(l.modified_by(_scope[:modification].getUserDisplayName(), _scope[:modification].getModifiedTime().iso8601)) -%></dd>
        </dl>
    </div>
    <div class="comment">
        <dl>
            <dt><%= l.string('COMMENT:') -%></dt>
            <dd>
                <div class='container'>
                    <%= render_comment(_scope[:modification], _scope[:pipeline_name]) -%>
                </div>

            </dd>
        </dl>
    </div>
    <% if _scope[:show_files] -%>
        <div class="modified_files">
            <% _scope[:modification].getModifiedFiles().each do |file_in_mod| %>
                <div class="<%= file_in_mod.getAction() -%>"><%= file_in_mod.getFileName() -%></div>
            <% end %>
        </div>
    <% end -%>
</div>
                <%else%>
                    <% material_revision_in_build_cause.getModifications().each do |mod_in_build_cause| %>
                        <% _scope = {:modification => mod_in_build_cause, :pipeline_name => scope[:pipeline_name], :show_files => scope[:show_files]}; -%><div class="change">
    <div class="revision">
        <dl>
            <dt><%= l.string('REVISION:') -%></dt>
            <dd><%= _scope[:modification].getRevision() -%></dd>
        </dl>
    </div>
    <div class="modified_by">
        <dl>
            <dt><%= l.string('MODIFIED_BY:') -%></dt>
            <dd><%= h(l.modified_by(_scope[:modification].getUserDisplayName(), _scope[:modification].getModifiedTime().iso8601)) -%></dd>
        </dl>
    </div>
    <div class="comment">
        <dl>
            <dt><%= l.string('COMMENT:') -%></dt>
            <dd>
                <div class='container'>
                    <%= render_comment(_scope[:modification], _scope[:pipeline_name]) -%>
                </div>

            </dd>
        </dl>
    </div>
    <% if _scope[:show_files] -%>
        <div class="modified_files">
            <% _scope[:modification].getModifiedFiles().each do |file_in_mod| %>
                <div class="<%= file_in_mod.getAction() -%>"><%= file_in_mod.getFileName() -%></div>
            <% end %>
        </div>
    <% end -%>
</div>
                    <% end %>
                <%end%>

            <% else %>
                <div class="change">
                    <% scope[:dmr] = material_revision_in_build_cause.getRevision() %>
                    <div class="revision">
                        <dl>
                            <dt><%= l.string('REVISION:') -%></dt>
                            <dd><%= link_to(scope[:dmr].getRevision(), path_for_stage(scope[:dmr]))-%></dd>
                        </dl>
                    </div>
                    <div class="label">
                        <dl>
                            <dt><%= l.string('LABEL:') -%></dt>
                            <dd><%= link_to(scope[:dmr].getPipelineLabel(), url_for_dmr(scope[:dmr])) -%></dd>
                        </dl>
                    </div>
                    <div class="completed_at">
                        <dl>
                            <dt><%= l.string('COMPLETED AT:') -%></dt>
                            <dd><%= material_revision_in_build_cause.getLatestModification().getModifiedTime().iso8601 -%></dd>
                        </dl>
                    </div>
                </div>
            <% end %>
        </div>
      <% end %>
    <% else %>
    <div class="information">
        <p>No materials were fetched for this stage because the <a href="/go/help/configuration_reference.html#stage" target="_blank">fetchMaterials</a> flag was set to false</p>
    </div>
    <% end %>
</div>

        </div>
    <% when 'pipeline' %>
        <% if is_ie8?(request.env["HTTP_USER_AGENT"]) -%>
            <div class="vsm_not_supported notification">
                <p class="information">
                    <%= l.string("VSM_UNSUPPORTED_ON_IE8")  -%>
                </p>
            </div>
        <% end -%>
        <div id="pipeline_visualization">
            <% scope = {}; -%><%
   scope[:pipeline] = @graph.pipeline()
   scope[:current_pipeline_name] = scope[:pipeline].getName()
%>
    <div class="upstream">
        <h4 class="secondary">Upstream</h4>
        <% scope[:pipeline].getCurrentRevisions().each_with_index do |revision_in_pipeline_dep, index_upstream|
            scope[:material] = revision_in_pipeline_dep.getMaterial()
            scope[:rev] = revision_in_pipeline_dep.getRevision()
        %>
            <div id="upstream_<%=index_upstream%>" class="pipeline">
                <div class="content">
                    <div class="material <%= material_type(scope[:material]) %>" title="<%= scope[:material].getDisplayName() %> - <%= revision_for(revision_in_pipeline_dep) %>"><%= scope[:material].getTypeForDisplay() %></div>
                    <% if dependency?(scope[:material]) -%>
                        <% scope[:upstream_pipeline_name] = scope[:rev].getPipelineName() -%>
                        <% scope[:upstream_pipeline_label] = scope[:rev].getPipelineLabel() -%>
                        <div><%= link_to(smart_word_breaker(scope[:upstream_pipeline_name]), url_for_pipeline(scope[:upstream_pipeline_name])) %></div>
                        <div><%= smart_word_breaker(revision_in_pipeline_dep.getLatestShortRevision()) %></div>
                        <%= link_to smart_word_breaker(scope[:upstream_pipeline_label]), url_for_dmr(scope[:rev]) -%>
                    <% else -%>
                        <div><%= smart_word_breaker(scope[:material].getDisplayName()) %> - <%= smart_word_breaker(revision_in_pipeline_dep.getLatestShortRevision()) %></div>
                    <% end -%>
                </div>
            </div>
        <% end %>
    </div>
    <div class="current">
        <h4 class="secondary">Current</h4>

        <div id="current_<%= scope[:current_pipeline_name] %>" class="pipeline">
            <div class="name">
                <%= link_to(smart_word_breaker(scope[:current_pipeline_name]), url_for_pipeline(scope[:current_pipeline_name])) %>
            </div>
            <div class="content">
                Label: <%= link_to smart_word_breaker(truncate(scope[:pipeline].getLabel(), :length => 25)), "#", {:title => scope[:pipeline].getLabel()} %>
                <% _scope = {:pipeline => scope[:pipeline], :total_width => 10.0 }; -%><div class="stages">
    <% _scope[:pipeline].getStageHistory().each do |stage| %>
        <% __scope = {:pipeline => _scope[:pipeline], :stage => stage, :total_width => _scope[:total_width]}; -%><% if placeholder_stage?(__scope[:stage]) -%>
    <span class='stage'>
        <% ___scope = {:pipeline => __scope[:pipeline], :stage => __scope[:stage], :total_width => __scope[:total_width]}; -%><%
   ___scope[:state] = ___scope[:stage].getState()
   ___scope[:stage_name] = ___scope[:stage].getName()
%>
<div class="stage_bar <%= ___scope[:state] %>"
     title="<%= "%s (%s)" % [___scope[:stage_name], ___scope[:state]] %>"
     style='width: <%= stage_width_em(___scope[:pipeline].getStageHistory().size(), false, ___scope[:total_width]) %>'>
    <%= check_for_cancelled_contents(___scope[:state]) -%>
</div>

    </span>
<% else -%>
    <a href='<%= stage_detail_path(:pipeline_name => __scope[:pipeline].getName(), :pipeline_counter => __scope[:pipeline].getCounter(), :stage_name => __scope[:stage].getName(), :stage_counter => __scope[:stage].getCounter()) -%>' class='stage'>
        <% ___scope = {:pipeline => __scope[:pipeline], :stage => __scope[:stage], :total_width => __scope[:total_width]}; -%><%
   ___scope[:state] = ___scope[:stage].getState()
   ___scope[:stage_name] = ___scope[:stage].getName()
%>
<div class="stage_bar <%= ___scope[:state] %>"
     title="<%= "%s (%s)" % [___scope[:stage_name], ___scope[:state]] %>"
     style='width: <%= stage_width_em(___scope[:pipeline].getStageHistory().size(), false, ___scope[:total_width]) %>'>
    <%= check_for_cancelled_contents(___scope[:state]) -%>
</div>

    </a>
<% end -%>

    <% end %>
</div>

            </div>
        </div>
    </div>
    <div class="downstream">
        <h4 class="secondary">Downstream</h4>
        <%           
           @graph.groupedDependencies().each do |entry_in_dep|
           scope[:downstream_pipeline_name], scope[:models] = entry_in_dep
        %>
            <div id="downstream_<%=scope[:downstream_pipeline_name]%>" class="pipeline">

                <div class="title">
                    <span class="name"><%= link_to(smart_word_breaker(scope[:downstream_pipeline_name]), url_for_pipeline(scope[:downstream_pipeline_name])) %></span>
                </div>
                <div class="content">
                    <% scope[:models].each do |model_in_dep| %>
                        <div class="pipeline_instance">
                            <% if model_in_dep.getCounter() > 0 %>
                                <%= link_to smart_word_breaker(truncate(model_in_dep.getLabel(), :length => 25)), url_for_pipeline_instance(model_in_dep), {:title => model_in_dep.getLabel()} %>
                            <% end %>
                            <% _scope = {:pipeline => model_in_dep, :total_width => 10.0 }; -%><div class="stages">
    <% _scope[:pipeline].getStageHistory().each do |stage| %>
        <% __scope = {:pipeline => _scope[:pipeline], :stage => stage, :total_width => _scope[:total_width]}; -%><% if placeholder_stage?(__scope[:stage]) -%>
    <span class='stage'>
        <% ___scope = {:pipeline => __scope[:pipeline], :stage => __scope[:stage], :total_width => __scope[:total_width]}; -%><%
   ___scope[:state] = ___scope[:stage].getState()
   ___scope[:stage_name] = ___scope[:stage].getName()
%>
<div class="stage_bar <%= ___scope[:state] %>"
     title="<%= "%s (%s)" % [___scope[:stage_name], ___scope[:state]] %>"
     style='width: <%= stage_width_em(___scope[:pipeline].getStageHistory().size(), false, ___scope[:total_width]) %>'>
    <%= check_for_cancelled_contents(___scope[:state]) -%>
</div>

    </span>
<% else -%>
    <a href='<%= stage_detail_path(:pipeline_name => __scope[:pipeline].getName(), :pipeline_counter => __scope[:pipeline].getCounter(), :stage_name => __scope[:stage].getName(), :stage_counter => __scope[:stage].getCounter()) -%>' class='stage'>
        <% ___scope = {:pipeline => __scope[:pipeline], :stage => __scope[:stage], :total_width => __scope[:total_width]}; -%><%
   ___scope[:state] = ___scope[:stage].getState()
   ___scope[:stage_name] = ___scope[:stage].getName()
%>
<div class="stage_bar <%= ___scope[:state] %>"
     title="<%= "%s (%s)" % [___scope[:stage_name], ___scope[:state]] %>"
     style='width: <%= stage_width_em(___scope[:pipeline].getStageHistory().size(), false, ___scope[:total_width]) %>'>
    <%= check_for_cancelled_contents(___scope[:state]) -%>
</div>

    </a>
<% end -%>

    <% end %>
</div>

                        </div>
                    <%end%>
                    <% scope[:model] = scope[:models].first()
                        scope[:has_upstream_material], scope[:pegged_pipeline], scope[:pegged_revision] = @graph.hasUpStreamRevisionFor(scope[:model]), nil, nil
                        if scope[:has_upstream_material]
                            scope[:pegged_pipeline] = @graph.dependencyMaterialFor(scope[:model]).getPipelineUniqueFingerprint()
                            scope[:pegged_revision] = @graph.dependencyRevisionFor(scope[:model])
                        end
                    %>
                    <% _scope = {:pipeline=>scope[:model], :label=>"Trigger with options",
                                                                                                  :can_trigger => (scope[:has_upstream_material] && scope[:model].getCanRun()),
                                                                                                  :has_upstream_material => scope[:has_upstream_material],
                                                                                                  :pegged_pipeline => scope[:pegged_pipeline],
                                                                                                  :pegged_revision => scope[:pegged_revision] }; -%><%= pipeline_operations_blocking_form_remote_tag :url => { :controller => 'pipelines', :action => 'show_for_trigger' },
                             :html => {
                                     :onsubmit => "PipelineOperations.onTriggerWithOptions(this, '#{_scope[:pipeline].getName()}', '#{l.string('TRIGGER')}', '#{pipeline_show_with_option_path}'); return false;"
                             }

-%>
    <input type="hidden" name="pipeline_name" value="<%=_scope[:pipeline_name]=_scope[:pipeline].getName()%>"/>
    <div class='operate trigger_with_options_wrapper'>
        <%= submit_button(_scope[:label], :type => 'image', :disabled => !_scope[:can_trigger], :id => "deploy-with-options-#{_scope[:pipeline].getName()}") -%>
    </div>
    <% if _scope[:has_upstream_material] %>
        <input type="hidden" name="pegged_revisions[<%= _scope[:pegged_pipeline] %>]" value="<%= _scope[:pegged_revision] %>"/>
    <% end%>
<%= end_form_tag %>
                </div>
            </div>
        <%
           end
        %>
    </div>
    <script type="text/javascript">
        Util.on_load(initPipelineVisualization);
        $j(window).resize(function(){
            initPipelineVisualization();
        });
    </script>
        </div>
    <% when 'tests' %>
        <div class="fbh_microcontent_popup dashboard_build_cause_like_microcontent_popups">
            <div class="hidden changes enhanced_dropdown" id="fbh_build_cause_content">&nbsp;</div>
            <div class="hidden changes enhanced_dropdown failure_detail_popup" id="fbh_failure_details_content">&nbsp;</div>
        </div>
        <div id="non_passing_tests" class="non_passing_tests overview_widget">
            <% cache(view_cache_key.forFbhOfStagesUnderPipeline(@stage.getStage().getIdentifier().pipelineIdentifier()), :subkey => view_cache_key.forFailedBuildHistoryStage(@stage.getStage(), @response_format)) do %>
                <% scope = {}; -%>
    <% if @failing_tests_error_message %>
        <span class="error"><%= @failing_tests_error_message %></span>
    <% elsif @failing_tests.numberOfTests() == 0 %>
        <h3>
            <span class="message"><%= l.string("There are tests configured in this stage but could not compute results.") %></span>
        </h3>
    <% elsif @stage.getState().equals(com.thoughtworks.cruise.domain.StageState::Passed) %>
        <h3>
            <div class="counts">
                <span class="total"><%= l.string("Tests Run: X", [@failing_tests.numberOfTests()]) %></span>
                <span class="failures"><%= l.string("TOTAL_FAILURES_COUNT", [@failing_tests.totalFailureCount()]) %></span>
                <span class="errors"><%= l.string("TOTAL_ERRORS_COUNT", [@failing_tests.totalErrorCount()]) %></span>
            </div>
            <% if @failing_tests.totalFailureCount() > 0 || @failing_tests.totalErrorCount() > 0 %>
                <div class="message"><%= l.string("THE_STAGE_PASSED_WITH_WARNING") %></div>
                <div class="message"><%= l.string("THE_STAGE_PASSED_WITH_WARNING_FIX") %></div>
            <% else %>
                <span class="message"><%= l.string("THE_STAGE_PASSED") %></span>
            <% end %>
        </h3>
    <% else %>
        <h3>
            <div class="counts">
                <span class="total"><%= l.string("Tests Run: X", [@failing_tests.numberOfTests()]) %></span>
                <span class="failures"><%= l.string("TOTAL_FAILURES_COUNT", [@failing_tests.totalFailureCount()]) %></span>
                <span class="errors"><%= l.string("TOTAL_ERRORS_COUNT", [@failing_tests.totalErrorCount()]) %></span>
            </div>
            <span class="message"><%= l.string("New Tests Broken Since:") %> <span class="secondary">(<%= l.string("ordered by check-in/material time") %>)</span></span>
        </h3>
        <ol>
            <% @failing_tests.failingTestsInPipelines().each_with_index do |pipeline_in_non_passing_tests, idx_in_non_passing_tests| %>
                <li class="failing_pipeline" id="failing_pipeline<%= idx_in_non_passing_tests %>">
                    <div class="pipeline_bar">
                        <div class="counts secondary">
                            <span class="failures"><%= l.string("UNIQUE_FAILURES_COUNT", [pipeline_in_non_passing_tests.failureCount()]) %></span>
                            <span class="errors"><%= l.string("UNIQUE_ERRORS_COUNT", [pipeline_in_non_passing_tests.errorCount()]) %></span></div>
                        <div class="color_code Failed"></div>
                        <div class="pipeline_details">
                            <span class="pipeline_label secondary"><%= l.string("Pipeline Label:") %> <%= pipeline_in_non_passing_tests.getLabel() %></span>
                            <% scope[:changes_button_id] = build_cause_popup_id_for_pipeline_counter(pipeline_in_non_passing_tests.getCounter(), "changes_button_") -%>
                            <span class="changes_button_wrapper">
                                <%= link_to(l.string("CHANGES"), build_cause_path(:pipeline_name => @stage.getIdentifier().getPipelineName(), :pipeline_counter => pipeline_in_non_passing_tests.getCounter()), :id => scope[:changes_button_id], :class => "show_panel submit_small fbh_build_cause_button") -%>
                            </span>
                        </div>
                        <script type="text/javascript">
                            Util.namespace('fbh_build_cause_urls').set('<%= scope[:changes_button_id] -%>', '<%= build_cause_path(:pipeline_name => params[:pipeline_name], :pipeline_counter => pipeline_in_non_passing_tests.getCounter()) -%>');
                        </script>
                    </div>
                    <%unless pipeline_in_non_passing_tests.users().empty?%>
                        <div class="users">By <%=pipeline_in_non_passing_tests.users().join(", ")%></div>
                    <%end%>
                    <div class="block_to_hide_or_reveal_by_above_pipeline_bar">
                        <%if pipeline_in_non_passing_tests.failingSuites().empty?%>
                            These changes did not break any of the currently failing tests.
                        <%end%>
                        <% pipeline_in_non_passing_tests.failingSuites().each do |suite_in_non_passing_tests| %>
                            <div class="suite"><%= l.string("Suite:") %> <span class="suite_name"><%= suite_in_non_passing_tests.fullName() -%></span></div>
                            <table class="test_suite">
                                <tr>
                                    <td colspan="3">

                                    </td>
                                </tr>
                                <%
                                   scope[:row] = 0;
                                   suite_in_non_passing_tests.tests().each do |test_in_non_passing_tests|
                                       scope[:row_class] = ""
                                       scope[:row_class] = "alt_row" unless scope[:row] %2 != 0
                                       scope[:row] = scope[:row] + 1
                                %>
                                    <tr class="test_case <%= scope[:row_class] %>">
                                        <td class="test_status">
                                            <div class="<%= test_in_non_passing_tests.getStatus() %>">&nbsp;</div>
                                        </td>
                                        <td class="test_name">
                                            <span class="name"><%= test_in_non_passing_tests.getName() %></span>
                                                <span class="jobs">
                                                    (<%= test_in_non_passing_tests.getJobs().map do |job_identifier_in_non_passing_tests|
                                                        fbh_failure_detail_popup_id_for_failure(job_identifier_in_non_passing_tests, suite_in_non_passing_tests.fullName(), test_in_non_passing_tests.getName())
                                                        link_to(job_identifier_in_non_passing_tests.getBuildName(), url_for_job_identifier(job_identifier_in_non_passing_tests)) + failure_details_link(job_identifier_in_non_passing_tests, suite_in_non_passing_tests.fullName(), test_in_non_passing_tests.getName())
                                                     end.join(",") %>)
                                            </span>
                                        </td>
                                    </tr>
                                <% end %>
                            </table>
                        <% end %>
                    </div>
                </li>
            <% end %>
        </ol>
    <% end %>


            <% end %>
        </div>
    <% when 'stats' %>
        <div id="stage_stats">
            <% scope = {:pagination => @pagination, :chart_scale => @chart_scale, :start_end_dates => @start_end_dates,
                                                                   :chart_stage_duration_passed => @chart_stage_duration_passed, :chart_tooltip_data_passed => @chart_tooltip_data_passed,
                                                                   :chart_stage_duration_failed => @chart_stage_duration_failed, :chart_tooltip_data_failed => @chart_tooltip_data_failed}; -%><div class="stats">
    <% if @no_chart_to_render %>
         <% _scope = {:notification_message => l.string("NO_GRAPH_FOR_STAGE")}; -%><div class="notification">
    <p class="information">
        <%= _scope[:notification_message] %>
    </p>
</div>
    <% else %>
        <div id="chart_details_container">
            <% _scope = {:chart_scale => scope[:chart_scale], :start_end_dates => scope[:start_end_dates],
                                                                       :chart_stage_duration_passed => scope[:chart_stage_duration_passed], :chart_tooltip_data_passed => scope[:chart_tooltip_data_passed],
                                                                       :chart_stage_duration_failed => scope[:chart_stage_duration_failed], :chart_tooltip_data_failed => scope[:chart_tooltip_data_failed]}; -%><script type="text/javascript">
    var chart;
    jQuery(document).ready(function() {
        Highcharts.setOptions({
            lang: {
                resetZoom: ''
            }
        });
        chart = new Highcharts.Chart({
            chart: {
                type: 'line',
                zoomType: 'xy',
                className: "stage_duration_chart",
                renderTo: 'highcharts',
                animation:'true',
                events:{
                        selection:function(event) {
                            if(!event.resetSelection){
                                this.setTitle({ text: ' '});
                            }
                        }
                }
            },
            title: {
                text: "<%= l.string("STAGE_DURATION_TITLE", _scope[:start_end_dates])-%>",
                style: {
                    fontWeight: 'bold',
                    color: 'black',
                    fontFamily: 'arial, helvetica, serif'
                }
            },
            subtitle: {
              text: "<%= l.string("CHART_ZOOM_SUBTITLE")-%>",
              style: {
                color: '#666666'
              }
            },
            credits: {
                enabled:false
            },
            legend: {
              align: 'right',
              verticalAlign: 'top',
              borderWidth: 0,
              floating: true,
              margin: 0,
              x: 10,
              y: 20
            },
            yAxis: {
                min: 0,
                startOnTick: false,
                title: {
                    text: "<%= l.string("STAGE_DURATION_SCALE", _scope[:chart_scale])-%>"
                },
                events: {
                    setExtremes: function() {
                        jQuery("#reset_zoom").show();
                    }
                }
            },
            xAxis: {
                allowDecimals : false,
                maxZoom: 40,
                title: {
                    text: '<%= l.string("PIPELINE_COUNTER") %>'
                },
                events: {
                    setExtremes: function() {
                        jQuery('#reset_zoom').show();
                    }
                }
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                },
                line: {
                  marker: {
                    enabled: true,
                    radius: 4,
                    states: {
                      hover: {
                        enabled: true,
                        radius: 8
                      }
                    }
                  },
                  lineWidth: 2,
                  states: {
                    hover: {
                      lineWidth: 2
                    }
                  }
                },
                series: {
                    minPointLength: 3,
                    cursor: "pointer",
                    shadow: false,
                    point: {
                        events: {
                            click: function() {
                                window.location.href = this.link;
                            }
                        }
                    }
                }
            },
            tooltip: {
                backgroundColor: "#FFF",
                style: {
                  color: "#333",
                  fontSize: "11px"
                },
                formatter: function() {
                    var key = this.point.key;
                    return  ''+
                            '<b>Label:</b> ' + this.series.options.tooltipData[key][2] +
                            '<br/><b>Duration:</b> ' + this.series.options.tooltipData[key][0] +
                            '<br/><b>Started At:</b>: ' + this.series.options.tooltipData[key][1] +
                            ''
                }
            },
            series: [
                {
                    name: "Failed",
                    color: '#FA2D2D',
                    data: <%= _scope[:chart_stage_duration_failed] -%>,
                    tooltipData: <%= _scope[:chart_tooltip_data_failed] -%>
                },
                {
                    name: "Passed",
                    color: '#78C42D',
                    data: <%= _scope[:chart_stage_duration_passed] -%>,
                    tooltipData: <%= _scope[:chart_tooltip_data_passed] -%>
                }
            ]
        }, function(chart) {
            var extremes_x = chart.xAxis[0].getExtremes();
            var extremes_y = chart.yAxis[0].getExtremes();
            jQuery('#reset_zoom').click(function() {
                chart.xAxis[0].setExtremes(extremes_x.min, extremes_x.max);
                chart.yAxis[0].setExtremes(extremes_y.min, extremes_y.max);
                chart.setTitle({ text: "<%= l.string("STAGE_DURATION_TITLE", _scope[:start_end_dates])-%>"});
                $(this).hide();
            });
        });
    });
</script>
<style type="text/css">
    tspan { line-height: 150%; }
</style>
<a id="reset_zoom" style="display: none;" class="link_as_button reset_zoom_link">Reset zoom</a>
<div id="highcharts" style="width: 100%; height: 400px;">

</div>

        </div>
        <div class="graph_navigation_buttons">
            <% if scope[:pagination].hasPreviousPage() %>
                <%= link_to l.string("NEWER"), stage_detail_tab_path(:action=> "stats", :page_number => scope[:pagination].getPreviousPage()), :class => 'newer link_as_button' -%>
            <% end %>
            <% if scope[:pagination].hasNextPage() %>
                <%= link_to l.string("OLDER"), stage_detail_tab_path(:action=> "stats", :page_number => scope[:pagination].getNextPage()), :class => 'older link_as_button' -%>
            <% end %>
        </div>
    <% end  %>
</div>
        </div>
    <% when 'config' %>
        <div id="ran_with_config">
            <% scope = {:config_revision => @ran_with_config_revision}; -%><div class="config">
    <% if is_user_an_admin? %>
        <% if scope[:config_revision] %>
            <% scope[:info_message] = "This version of config was edited by #{scope[:config_revision].getUsername()} on #{scope[:config_revision].getTime()}" -%>
            <% _scope = {:notification_message => scope[:info_message]}; -%><div class="notification">
    <p class="information">
        <%= _scope[:notification_message] %>
    </p>
</div>
            <pre id="content_container" class="wrap_pre code"><%= h(scope[:config_revision].getContent()) -%></pre>
        <% else %>
            <% _scope = {:notification_message => l.string("CONFIG_VERSION_NOT_FOUND")}; -%><div class="notification">
    <p class="information">
        <%= _scope[:notification_message] %>
    </p>
</div>
        <% end %>
    <% else %>
        <% _scope = {:notification_message => l.string("CONFIG_VERSION_UNAUTHORIZED")}; -%><div class="notification">
    <p class="information">
        <%= _scope[:notification_message] %>
    </p>
</div>
    <% end %>
</div>
        </div>
    <% end %>
</div>

<script type="text/javascript">

    Util.on_load(function() {
    <% if auto_refresh? %>
        <% unless ['stats'].include?(params[:action]) -%>
            AjaxRefreshers.addRefresher(new StageDetailAjaxRefresher('<%= stage_detail_tab_path(:format => "json", :action => params[:action]) %>', '<%= url_for_login %>', {current_stage_run: wire_up_stage_runs_popup, pipeline_visualization: initPipelineVisualization, stage_history: compare_link_handlers}), true);
       <% end %>
    <% end %>
//        ajaxy_microcontent_popup('non_passing_tests', 'fbh_build_cause_content', 'fbh_build_cause_urls', 'fbh_build_cause_button');
//        ajaxy_microcontent_popup('non_passing_tests', 'fbh_failure_details_content', 'fbh_failure_detail_urls', 'fbh_failure_detail_button');

        var content_box = jQuery('#fbh_build_cause_content');
        var popup = new MicroContentPopup('fbh_build_cause_content', new ContextualAjaxPopupHandler(content_box.get(0),
                function(event) {
                    return event.target.getAttribute("href");
                }));
        var popupShower = new MicroContentPopup.LiveShower(popup);

        jQuery('.fbh_build_cause_button').live('click', function(event) {
            popupShower.toggle_popup(event, this);
        });

        jQuery('.fbh_failure_detail_button').live('click', function(event) {
            popupShower.toggle_popup(event, this);
        });

    });
</script>